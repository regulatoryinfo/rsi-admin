{"ast":null,"code":"import { Map, polyline, polygon, FeatureGroup, featureGroup, LatLng, tileLayer, icon, canvas, geoJSON, circleMarker, LayerGroup, marker, Popup, vectorGrid } from 'leaflet';\nimport { GlobalVars } from '../common/globals';\nimport 'leaflet-bing-layer';\nimport 'leaflet.vectorgrid';\nimport { faLayerGroup, faArrowRight, faArrowLeft, faEye, faEyeSlash, faExpand, faXmark, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport * as Vincenty from 'node-vincenty';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@fortawesome/angular-fontawesome\";\nimport * as i5 from \"../base-map/base-map.component\";\n\nfunction MapComponent_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 24);\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r0.angleDown);\n  }\n}\n\nfunction MapComponent_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 24);\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r1.angleUp);\n  }\n}\n\nfunction MapComponent_div_21_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_21_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const toplayer_r7 = i0.ɵɵnextContext().$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.layerChange(toplayer_r7.name, false, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r8.eye);\n  }\n}\n\nfunction MapComponent_div_21_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_21_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const toplayer_r7 = i0.ɵɵnextContext().$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.layerChange(toplayer_r7.name, true, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r9.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_21_div_8_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_21_div_8_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const sublayer_r17 = i0.ɵɵnextContext().$implicit;\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.layerChange(sublayer_r17.name, false, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r18.eye);\n  }\n}\n\nfunction MapComponent_div_21_div_8_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_21_div_8_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const sublayer_r17 = i0.ɵɵnextContext().$implicit;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.layerChange(sublayer_r17.name, true, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r19.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_21_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"div\", 25)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 26);\n    i0.ɵɵtemplate(5, MapComponent_div_21_div_8_span_5_Template, 2, 1, \"span\", 27);\n    i0.ɵɵtemplate(6, MapComponent_div_21_div_8_span_6_Template, 2, 1, \"span\", 27);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const sublayer_r17 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(sublayer_r17.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", sublayer_r17.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !sublayer_r17.isSelected);\n  }\n}\n\nfunction MapComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"span\", 25)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 26);\n    i0.ɵɵtemplate(5, MapComponent_div_21_span_5_Template, 2, 1, \"span\", 27);\n    i0.ɵɵtemplate(6, MapComponent_div_21_span_6_Template, 2, 1, \"span\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵtemplate(8, MapComponent_div_21_div_8_Template, 7, 3, \"div\", 28);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toplayer_r7 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(toplayer_r7.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", toplayer_r7.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !toplayer_r7.isSelected);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", toplayer_r7.layers);\n  }\n}\n\nfunction MapComponent_span_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 24);\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r3.angleDown);\n  }\n}\n\nfunction MapComponent_span_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 24);\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r4.angleUp);\n  }\n}\n\nfunction MapComponent_div_31_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_31_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r32);\n      const toplayer_r26 = i0.ɵɵnextContext().$implicit;\n      const ctx_r30 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r30.layerChange(toplayer_r26.name, false, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r27 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r27.eye);\n  }\n}\n\nfunction MapComponent_div_31_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_31_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const toplayer_r26 = i0.ɵɵnextContext().$implicit;\n      const ctx_r33 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r33.layerChange(toplayer_r26.name, true, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r28 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r28.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_31_div_8_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r41 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_31_div_8_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r41);\n      const sublayer_r36 = i0.ɵɵnextContext().$implicit;\n      const ctx_r39 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r39.layerChange(sublayer_r36.name, false, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r37 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r37.eye);\n  }\n}\n\nfunction MapComponent_div_31_div_8_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r44 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 29);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_31_div_8_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r44);\n      const sublayer_r36 = i0.ɵɵnextContext().$implicit;\n      const ctx_r42 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r42.layerChange(sublayer_r36.name, true, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r38 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r38.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_31_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30)(1, \"div\", 25)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 26);\n    i0.ɵɵtemplate(5, MapComponent_div_31_div_8_span_5_Template, 2, 1, \"span\", 27);\n    i0.ɵɵtemplate(6, MapComponent_div_31_div_8_span_6_Template, 2, 1, \"span\", 27);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const sublayer_r36 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(sublayer_r36.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", sublayer_r36.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !sublayer_r36.isSelected);\n  }\n}\n\nfunction MapComponent_div_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"span\", 25)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 26);\n    i0.ɵɵtemplate(5, MapComponent_div_31_span_5_Template, 2, 1, \"span\", 27);\n    i0.ɵɵtemplate(6, MapComponent_div_31_span_6_Template, 2, 1, \"span\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵtemplate(8, MapComponent_div_31_div_8_Template, 7, 3, \"div\", 28);\n    i0.ɵɵelement(9, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toplayer_r26 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(toplayer_r26.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", toplayer_r26.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !toplayer_r26.isSelected);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", toplayer_r26.layers);\n  }\n}\n\nfunction MapComponent_div_42_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const p_r45 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", p_r45.ap.shortTitle, \" \");\n  }\n}\n\nfunction MapComponent_div_42_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r52 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 38)(1, \"fa-icon\", 39);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_42_span_3_Template_fa_icon_click_1_listener() {\n      i0.ɵɵrestoreView(_r52);\n      const p_r45 = i0.ɵɵnextContext().$implicit;\n      const ctx_r50 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r50.toggleGraph(p_r45));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r47 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r47.angleDown);\n  }\n}\n\nfunction MapComponent_div_42_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r55 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 38)(1, \"fa-icon\", 39);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_42_span_4_Template_fa_icon_click_1_listener() {\n      i0.ɵɵrestoreView(_r55);\n      const p_r45 = i0.ɵɵnextContext().$implicit;\n      const ctx_r53 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r53.selectProfile(p_r45));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"fa-icon\", 39);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_42_span_4_Template_fa_icon_click_2_listener() {\n      i0.ɵɵrestoreView(_r55);\n      const p_r45 = i0.ɵɵnextContext().$implicit;\n      const ctx_r56 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r56.toggleGraph(p_r45));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r48 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r48.expand);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r48.angleUp);\n  }\n}\n\nfunction MapComponent_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r59 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"p\", 32);\n    i0.ɵɵtemplate(2, MapComponent_div_42_span_2_Template, 2, 1, \"span\", 33);\n    i0.ɵɵtemplate(3, MapComponent_div_42_span_3_Template, 2, 1, \"span\", 34);\n    i0.ɵɵtemplate(4, MapComponent_div_42_span_4_Template, 3, 2, \"span\", 35);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 36)(6, \"google-chart\", 37);\n    i0.ɵɵlistener(\"mouseenter\", function MapComponent_div_42_Template_google_chart_mouseenter_6_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r59);\n      const p_r45 = restoredCtx.$implicit;\n      const ctx_r58 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r58.profileMousemove($event, p_r45));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const p_r45 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !p_r45.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !p_r45.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", p_r45.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !p_r45.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", p_r45.ap.ap_name);\n    i0.ɵɵproperty(\"title\", p_r45.ap.title)(\"type\", \"ComboChart\")(\"data\", p_r45.gchtdata)(\"columnNames\", ctx_r6.gchtColumns)(\"options\", ctx_r6.gchtOptions);\n  }\n}\n\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(apiService, router) {\n      this.apiService = apiService;\n      this.router = router;\n      this.layergroup = faLayerGroup;\n      this.arrowRight = faArrowRight;\n      this.arrowLeft = faArrowLeft;\n      this.angleDown = faChevronDown;\n      this.angleUp = faChevronUp;\n      this.eye = faEye;\n      this.eyeSlash = faEyeSlash;\n      this.expand = faExpand;\n      this.close = faXmark;\n      this.org_id = GlobalVars.org_id;\n      this.colorScheme = {\n        domain: ['#8B4513', '#00ff00', '#0000ff', '#ff0000']\n      };\n      this.gchtOptions = {\n        colors: ['#8B4513', '#00ff00', '#0000ff', '#ff00ff', '#ff0000'],\n        crosshair: {\n          trigger: 'both',\n          orientation: 'vertical'\n        },\n        selectionMode: 'multiple',\n        focusTarget: 'category',\n        legend: {\n          position: 'bottom'\n        },\n        vAxis: {\n          title: 'Elevation'\n        },\n        hAxis: {\n          title: 'Distance'\n        },\n        seriesType: 'line',\n        series: {\n          0: {\n            type: 'area'\n          },\n          1: {\n            type: 'area'\n          }\n        }\n      };\n      this.activeapShapes = [];\n      this.activefreqRad = [];\n      this.points_layers = [];\n      this.points_tile_layers = [];\n      this.activeSites = [];\n      this.qualShow = false;\n      this.networkShow = true;\n      this.gchtColumns = [\"Distance\", \"Terrain\", \"Clutter\", \"Freznel\", \"Freznel_60\", \"LOS\"];\n      this.qualified = false;\n      this.chtdata = [];\n      this.showGraphs = false;\n      this.graphsMin = false;\n      this.showQualfrm = false;\n      this.qualprofs = [];\n      this.profShow = false;\n      this.zoom = 10;\n      this.mapZoom = 5;\n      this.mapCenter = new LatLng(39.147079, -97.185059);\n      this.allOverlays = {};\n      this.bingMapskey = 'AtbnqglVZkEBgFD6RbmKGM_0Oql2dMKxk5Kf-eKyLn_rIZhaUxnvBdExbrNFsJD-'; // mapCenter = L.latLng( { lat: 39.147079, lng: -97.185059 } );\n\n      this.mapOptions = {};\n      this.options = {\n        zoom: this.mapZoom,\n        center: this.mapCenter,\n        noWrap: true\n      };\n      this.tileLayers = [{\n        'name': 'Base Maps',\n        'isSelected': true,\n        'category': 'tiles',\n        'singleSelect': 1,\n        'layers': [{\n          'name': 'OSM Roads',\n          'isSelected': false,\n          'zIndex': 1\n        }, {\n          'name': 'Hybrid',\n          'isSelected': false,\n          'zIndex': 1\n        }, {\n          'name': 'Terrain',\n          'isSelected': false,\n          'zIndex': 1\n        }]\n      }, {\n        'name': 'Overlays',\n        'isSelected': false,\n        'category': 'tiles',\n        'singleSelect': 0,\n        'layers': [{\n          'name': 'Roads',\n          'isSelected': false,\n          'zIndex': 10\n        }]\n      }];\n      this.basicLayers = [{\n        'name': 'Sites',\n        'isSelected': true,\n        'category': 'network',\n        'layers': [{\n          'name': 'Active Sites',\n          'isSelected': true\n        }\n        /*  {'name':'Proposed Sites','isSelected':true},\r\n         {'name':'Inactive Sites','isSelected':false}  */\n        ]\n      }, {\n        'name': 'APs',\n        'isSelected': true,\n        'category': 'network',\n        'layers': [{\n          'name': 'Active APs',\n          'isSelected': true\n        }\n        /* {'name':'Proposed APs','isSelected':true},\r\n        {'name':'Inactive APs','isSelected':false} */\n        ]\n      }, {\n        'name': 'Network Boundaries',\n        'isSelected': true,\n        'category': 'network',\n        'layers': [{\n          'name': 'Wireless Bounds',\n          'isSelected': false\n        }, {\n          'name': 'Unlicensed Bounds',\n          'isSelected': false\n        }, {\n          'name': 'Licensed Bounds',\n          'isSelected': false\n        }, {\n          'name': 'Fiber Bounds',\n          'isSelected': false\n        }, {\n          'name': 'DOCSIS Bounds',\n          'isSelected': false\n        }, {\n          'name': 'DSL Bounds',\n          'isSelected': false\n        }\n        /*{'name':'Inactive APs','isSelected':false} */\n        ]\n      }, {\n        'name': 'BDC Locations',\n        'isSelected': false,\n        'category': 'network',\n        'layers': [{\n          'name': 'Serviceable Locations',\n          'isSelected': true\n        }\n        /* {'name':'Serviceable','isSelected':true},\r\n         {'name':'Inactive APs','isSelected':false} */\n        ]\n      }];\n      this.allLayers = []; // placeholder layers array for things like los lines, sector coverage objects, what-if, etc\n\n      this.analysisLayers = [{\n        'name': 'Analysis Layers',\n        'isSelected': false,\n        'category': 'analysis',\n        'layers': [{\n          'name': 'Basic Radius - Active',\n          'isSelected': false\n        }]\n      }]; //placeholder for qualfiy layers\n\n      this.qualifyLayers = [{\n        'name': \"Qualify\",\n        'isSelected': true,\n        'category': 'qualify',\n        'layers': [{\n          'name': 'New Lead',\n          'isSelected': true\n        }, {\n          'name': 'Qualify Paths',\n          'isSelected': true\n        }, {\n          'name': 'Qualify Sectors',\n          'isSelected': true\n        }]\n      }]; // layercontrol stuff\n\n      this.layerControlvisible = false;\n      this.tileShow = true;\n      this.datasetsShow = true;\n      this.mydataShow = true;\n      this.osm = tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        detectRetina: true,\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      });\n      this.stamenToner = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 20\n      });\n      this.stamenTerrainBg = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}{r}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 18\n      });\n      this.stamenTopoRelief = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toposm-color-relief/{z}/{x}/{y}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 20,\n        bounds: [[22, -132], [51, -56]]\n      });\n      this.esriRelief = tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri',\n        maxZoom: 13\n      });\n      this.esriWorldImagery = tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n      });\n      this.stamenTonerHybrid = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-hybrid/{z}/{x}/{y}{r}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 20\n      });\n      this.evaIcons = [];\n      this.layers = [this.stamenToner];\n      this.layersControl = {\n        baseLayers: {\n          'Street Map': this.stamenToner\n        },\n        overlays: {}\n      };\n      this.mapState = {};\n      this.projData = null;\n      this.infowindow = false;\n      this.selectionwindow = false;\n      this.sitedatatext = '';\n      this.infowindowobj = {};\n      this.streetviewobjs = [];\n      this.streetviewlines = [];\n      this.objCenter = {};\n      this.drawnItems = featureGroup();\n      this.drawOptions = {\n        draw: {\n          rectangle: {\n            shapeOptions: {\n              color: '#85bb65'\n            }\n          }\n        },\n        edit: {\n          featureGroup: this.drawnItems\n        }\n      };\n    }\n\n    receiveMap(map) {\n      const self = this;\n      this.map = map;\n      this.map.setView(this.mapCenter, 5);\n      this.layerControl = this.basicLayers; // this.buildLayer(this.appSiteobjs,'Sites');\n\n      self.doMapstuff();\n      /*  else{\r\n         const centerlat = this.activeSites[0].lat;\r\n         const centerlon = this.activeSites[0].lon;\r\n         self.map.setView(new LatLng(centerlat,centerlon ),14);\r\n       }  */\n    }\n\n    receiveZoom(zoom) {\n      this.zoom = zoom;\n      console.log(\"zoom \" + this.zoom);\n\n      if (this.zoom >= 16) {\n        /* if(this.map.hasLayer(this.allOverlays[\"Application Sites\"])){\r\n          this.map.removeLayer(this.allOverlays[\"Application Sites\"]);\r\n          this.allOverlays[\"Application Sites_icon\"].addTo(this.map);\r\n                }  */\n\n        /*  if(this.map.hasLayer(this.allOverlays[\"Sites\"])){\r\n           this.map.removeLayer(this.allOverlays[\"Sites\"]);\r\n           this.allOverlays[\"Sites_icon\"].addTo(this.map);\r\n                  }  */\n      } else {\n        /* if(this.map.hasLayer(this.allOverlays[\"Application Sites_icon\"])){\r\n          this.map.removeLayer(this.allOverlays[\"Application Sites_icon\"]);\r\n          this.allOverlays[\"Application Sites\"].addTo(this.map);\r\n                } */\n\n        /*  if(this.map.hasLayer(this.allOverlays[\"Sites_icon\"])){\r\n           this.map.removeLayer(this.allOverlays[\"Sites_icon\"]);\r\n           this.allOverlays[\"Sites\"].addTo(this.map);\r\n                  } */\n      }\n    }\n\n    receiveMove(move) {\n      this.currentLat = move.lat.toFixed(5);\n      this.currentLon = move.lng.toFixed(5);\n    }\n\n    receiveMapMove(e) {\n      console.log(e);\n      this.latlngBnds = e;\n    }\n\n    findCenter(points) {\n      const self = this;\n      const latlngBnds = this.map.getBounds();\n      let maxlat = 0;\n      let minlat = 0;\n      let minlon = 0;\n      let maxlon = 0;\n      let centerlat = 0;\n      let centerlon = 0;\n      let ptArray = [];\n      let zoom = 16;\n      let ptcnt = 0;\n      points.forEach(function (pt) {\n        ptcnt++;\n        /* if (ptcnt == 1){\r\n          minlat = pt.lat;\r\n          maxlat = pt.lat;\r\n          minlon = pt.lon;\r\n          maxlon = pt.lon;\r\n        }else{\r\n          if(pt.lat > maxlat){\r\n            maxlat = pt.lat;\r\n          }\r\n          if(pt.lat < minlat){\r\n            minlat = pt.lat;\r\n          }\r\n          if(pt.lon > maxlon){\r\n            maxlon = pt.lon;\r\n          }\r\n          if(pt.lon < minlon){\r\n            minlon = pt.lon;\r\n          }\r\n                }\r\n                if (ptcnt == points.length){\r\n          let latinc = (maxlat - minlat)/2;\r\n          let loninc = ((-minlon) - (-maxlon))/2;\r\n                  centerlat = minlat + latinc;\r\n          centerlon = maxlon - loninc;\r\n                  minlat = minlat - 0.025;\r\n          maxlat = maxlat + 0.025;\r\n          minlon = minlon - 0.025;\r\n          maxlon = maxlon + 0.025;\r\n                  \r\n          \r\n          self.map.setView(new LatLng(centerlat, centerlon ),zoom);\r\n                } */\n\n        ptArray.push([pt.lat, pt.lon]);\n      });\n\n      if (ptArray.length == 1) {\n        this.map.setView(new LatLng(ptArray[0][0], ptArray[0][1]), 5);\n      } else {\n        self.map.fitBounds(ptArray);\n      }\n    }\n\n    showLayercontrol() {\n      this.layerControlvisible = !this.layerControlvisible;\n    }\n\n    toggleTile() {\n      this.tileShow = !this.tileShow;\n    }\n\n    toggleDatasets() {\n      this.datasetsShow = !this.datasetsShow;\n    }\n\n    tilelayerChange(name, isSelected, section) {\n      const self = this; // const lcChecks = (this.form.controls.name as FormArray);\n\n      let lcArray = [];\n      lcArray = this.layerControl;\n\n      if (section === 'Tiles') {\n        lcArray = this.tileLayers; // console.log('changing tile layer');\n      }\n\n      let foundlayer = false; // look through each object to see if they need to be turned off\n\n      lcArray.forEach(function (LClayer) {\n        const lcLayername = LClayer.name;\n\n        if (lcLayername === name) {\n          foundlayer = true; // turn off all sublayers if on else turn on sublayers marked as selected\n\n          const lcSublayers = LClayer.layers;\n\n          if (isSelected === true) {\n            LClayer.isSelected = true; // turn on all sublayers currently marked as on\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                const subname = sublayer.name;\n                const subselect = sublayer.isSelected;\n\n                if (subselect) {\n                  if (self.allOverlays[subname]) {\n                    if (sublayer.zIndex) {\n                      self.allOverlays[subname].setZIndex(sublayer.zIndex);\n                    }\n\n                    self.allOverlays[subname].addTo(self.map);\n                  }\n                }\n              });\n            }\n          } else {\n            LClayer.isSelected = false; // turn off all sublayers, but leave their own object isSelected alone\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                const subname = sublayer.name;\n\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]);\n                }\n              });\n            }\n\n            LClayer.isSelected = false;\n          }\n        } else {\n          // check all sublayers to see if name is one of those\n          const lcSublayers = LClayer.layers;\n          lcSublayers.forEach(function (sublayer) {\n            const subname = sublayer.name;\n\n            if (name === subname) {\n              foundlayer = true;\n\n              if (isSelected) {\n                // now see if it is a singleSelect and turn off other layers if it is\n                if (LClayer.singleSelect && LClayer.singleSelect === 1) {\n                  self.turnOffOtherLayers(subname, lcSublayers);\n                }\n\n                if (self.allOverlays[subname]) {\n                  if (sublayer.zIndex) {\n                    self.allOverlays[subname].setZIndex(sublayer.zIndex);\n                  }\n\n                  self.allOverlays[subname].addTo(self.map);\n                }\n\n                sublayer.isSelected = true;\n              } else {\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]);\n                }\n\n                sublayer.isSelected = false;\n              }\n            }\n          });\n        }\n      }); //GlobalVars.layerControl = this.layerControl;\n    } // turns off other layers in a layer group if only one is supposed to be on at a time\n\n\n    turnOffOtherLayers(name, layers) {\n      const self = this;\n      layers.forEach(function (sublayer) {\n        const subname = sublayer.name;\n\n        if (subname !== name) {\n          if (self.map.hasLayer(self.allOverlays[subname])) {\n            // var zindex =\n            self.map.removeLayer(self.allOverlays[subname]);\n          }\n\n          sublayer.isSelected = false;\n        }\n      });\n    }\n\n    getTiles() {\n      // const activeLayer = new L.LayerGroup();\n      const hybridLayer = tileLayer.bing({\n        'bingMapsKey': this.bingMapskey,\n        'imagerySet': 'AerialWithLabels'\n      });\n      this.osm['name'] = 'OSM Roads';\n      hybridLayer['name'] = 'Hybrid';\n      this.stamenTopoRelief['name'] = 'Terrain';\n      this.stamenTonerHybrid['name'] = 'Roads';\n      this.allOverlays['OSM Roads'] = this.osm;\n      this.allOverlays['Hybrid'] = hybridLayer;\n      this.allOverlays['Terrain'] = this.esriRelief;\n      this.allOverlays['Roads'] = this.stamenTonerHybrid;\n      this.buildLayercontrol('Tiles');\n    }\n\n    buildLayercontrol(l) {\n      var self = this;\n      var lcArray = [];\n      lcArray = this.layerControl;\n\n      if (l == 'Tiles') {\n        lcArray = this.tileLayers;\n      }\n\n      if (l == 'Qualify') {\n        lcArray = this.qualifyLayers;\n      }\n      /*if(l == 'Frequencies'){\r\n        lcArray = this.frequencyLayers;\r\n      }\r\n      \r\n      if (l == 'Viewsheds'){\r\n        lcArray = this.viewShedlayers;\r\n            }\r\n            if (l == 'Search Results'){\r\n        lcArray = this.searchLayers;\r\n            }\r\n            if (l == 'What If'){\r\n        lcArray = this.whatifLayers;\r\n            } */\n      //const lcChecks = (this.form.controls.name as FormArray);\n\n\n      lcArray.forEach(function (LClayer) {\n        var lcLayername = LClayer.name;\n\n        if (lcLayername == l) {\n          var lcSublayers = LClayer.layers;\n\n          if (LClayer.isSelected) {\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                var subselect = sublayer.isSelected;\n\n                if (subselect) {\n                  if (self.allOverlays[subname]) {\n                    console.log(\"adding subname \" + subname);\n                    self.allOverlays[subname].addTo(self.map);\n                  }\n                }\n              });\n            }\n          } else {\n            if (lcSublayers.length > 0) {}\n          }\n        }\n      });\n    }\n\n    hideLayercontrol() {\n      this.layerControlvisible = false;\n    } // Map Functions\n\n\n    getCoords(e) {\n      this.currentLat = e.latlng.lat.toFixed(5);\n      this.currentLon = e.latlng.lng.toFixed(5); // console.log(this.currentLat, this.currentLon);\n    }\n\n    mapMoveEnd(map) {\n      this.mapCenter = this.map.getCenter(); //GlobalVars.mapCenter = this.mapCenter;\n\n      this.mapState = {\n        'mapCenter': this.map.getCenter(),\n        'mapZoom': this.map.getZoom()\n      };\n      localStorage.setItem('mapState', JSON.stringify(this.mapState)); // console.log('current center is ' + this.mapCenter);\n    }\n\n    mapZoomEnd(map) {\n      this.mapZoom = this.map.getZoom(); //GlobalVars.mapZoom = this.mapZoom;\n\n      this.mapState = {\n        'mapCenter': this.map.getCenter(),\n        'mapZoom': this.map.getZoom()\n      };\n      localStorage.setItem('mapState', JSON.stringify(this.mapState));\n    }\n\n    ngOnInit() {\n      //this.getSites();\n      //this.getAPs();\n      this.getTiles(); //this.getNetworkBounds();\n      //this.buildTileLayer();\n      //this.getSevicedLocations(); \n\n      this.layerControl = this.basicLayers;\n    }\n\n    getSevicedLocations() {\n      var self = this;\n      this.apiService.getServicedLocations(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          const locs = response.locations;\n          self.serviceLocs = locs; //self.createLocationmapobj(locs);\n\n          if (self.map) {\n            self.createLocationmapobj();\n          }\n\n          return locs;\n        } else {\n          console.log(JSON.stringify(response.error));\n          alert(\"could not get serviceable locations\");\n        }\n      });\n    }\n\n    getSites() {\n      const self = this;\n      this.apiService.getAdminSites(this.org_id).subscribe(response => {\n        //console.log(data);\n        if (response.result == 'success') {\n          var rsites = response.data;\n          self.siteData = [];\n          rsites.forEach(function (site) {\n            var md = site.metadata;\n\n            if (md.length > 0) {\n              md.forEach(function (d) {\n                if (d.field == 'state') {\n                  site[\"state\"] = d.value;\n                }\n\n                if (d.field == 'site_type') {\n                  site[\"site_type\"] = d.value;\n                }\n              });\n            }\n\n            self.siteData.push(site);\n          }); // var sites = this.createSitesmapobj();\n\n          if (self.map) {\n            console.log(\"map is here creating site objs\");\n            this.createSitesmapobj();\n          }\n\n          return self.siteData;\n        } else {\n          console.log(\"error getting sites\");\n        }\n      });\n    }\n\n    createLocationmapobj() {\n      const self = this;\n      let locationLayer = new LayerGroup();\n      const dataobjs = self.serviceLocs;\n      let qMarkers = [];\n      dataobjs.forEach(function (dobj) {\n        // console.log('creating marker from '+ JSON.stringify(leadobj));\n        var popup = '';\n\n        if (dobj['location'] && dobj['location'] != '') {\n          popup += '<b>Location: ' + dobj['location'] + '</br>';\n        }\n\n        popup += '<b>Address: </b>' + dobj.address_primary + '</br>';\n        /* if (dobj['Site Address2'] && dobj['Site Address2'] != '') {\r\n          popup += dobj['Site Address2'] + '</br>';\r\n        } */\n\n        popup += dobj.city + ', ' + dobj.state + ' ' + dobj.zip + '</br>';\n        popup += '<b>Best AP: </b>' + dobj.best_ap + '<br>Distance: ' + dobj.distance + '</br>Bearing: ' + dobj.bearing; //popup += '</br><a href=\"#\" (click)=\"self.showQualified('+dobj.location+')\">Show Results</a>';\n        //popup += '</br><span style=\"color: #00ff00\" id=\"showProfs\">Show Results</span>';\n\n        var lat = Number(dobj.latitude);\n        var lon = Number(dobj.longitude);\n        var marker;\n\n        if (!lat || !lon) {\n          // // console.log(JSON.stringify(dobj));\n          // console.log(dobj['Site Name'] + ' had no coords');s\n          var geojson = JSON.parse(dobj.geojson);\n          lat = geojson.coordinates[1];\n          lon = geojson.coordinates[0];\n        }\n\n        marker = circleMarker([lat, lon], {\n          fill: true,\n          fillColor: '#00ff00',\n          radius: 5,\n          stroke: false,\n          fillOpacity: 0.50\n        });\n        marker[\"name\"] = dobj.location_id;\n        marker.on('click', function (e) {\n          self.showQualified(dobj.location_id, lat, lon);\n        }); //.bindPopup(popup)\n\n        qMarkers.push(marker);\n      });\n      var locationsLayer = new LayerGroup(qMarkers);\n      locationsLayer['name'] = \"Serviceable Locations\";\n      this.allOverlays[\"Serviceable Locations\"] = locationsLayer;\n      this.buildLayercontrol(\"Locations\");\n      return true;\n    }\n\n    showLocationPopup() {}\n\n    createSitesmapobj() {\n      console.log(\"creating site map objects\"); //this.leadMarkers = [];\n\n      const lm = [];\n      const self = this;\n      let sitesarr = [];\n      let activeLayer = new LayerGroup();\n      /* var proposedLayer = new L.LayerGroup();\r\n      var inactiveLayer = new L.LayerGroup(); */\n\n      const towerIcon = icon({\n        iconUrl: 'https://app.regulatorysolutions.us/assets/images/tower.png',\n        iconSize: [23, 30],\n        iconAnchor: [11, 25]\n      });\n      const activeIcon = icon({\n        iconUrl: 'https://app.regulatorysolutions.us/assets/images/tower.png',\n        iconSize: [23, 30],\n        iconAnchor: [11, 25]\n      });\n      /*  var inactiveIcon = L.icon({iconUrl: '/assets/images/inactiveTower.png', iconSize: [23,30], iconAnchor: [25,25]});\r\n       var leadIcon = L.icon({iconUrl: '/assets/images/leadTower.png', iconSize: [23,30], iconAnchor: [25,25]}); */\n      //var activesiteLayer = new L.LayerGroup(this.activeSites);\n      //var inactivesiteLayer = new L.LayerGroup(this.inactiveSites);\n      //var proposedsiteLayer = new L.LayerGroup(this.proposedSites);\n\n      this.siteData.forEach(function (siteobj) {\n        //console.log(\"creating marker from \"+ JSON.stringify(leadobj));\n        let popup = \"\";\n        popup += \"<b>Name: </b>\" + siteobj.name + \"</br><b>Position: </b></br>\" + siteobj.lat + \", \" + siteobj.lon + \"</br>\";\n        popup += \"<b>Elevation: </b>\" + siteobj.max_elevation + \"</br>\";\n        popup += \"<b>Type: </b>\" + siteobj.site_type + \"</br>\"; //popup += \"<b>Status: </b>\" + siteobj.status;\n\n        const lat = Number(siteobj.lat);\n        const lon = Number(siteobj.lon); //var marker = L.marker([lat,lon]).bindPopup(popup);\n\n        let sitemarker = marker(new LatLng(lat, lon), {\n          icon: towerIcon\n        }).bindPopup(popup); //if (!siteobj.status || siteobj.status == \"\"){\n        //sitemarker = marker([lat,lon]).bindPopup(popup);\n\n        self.activeSites.push(sitemarker);\n        sitesarr.push(sitemarker); // //siteobj.markerid = activesiteLayer.getLayerId(marker);\n        // }\n\n        /* if (siteobj.status == \"Active\"){\r\n          \r\n          marker = L.marker([lat,lon],{icon:activeIcon}).bindPopup(popup);\r\n          \r\n          self.activeSites.push(marker);\r\n         \r\n          //siteobj.markerid = activesiteLayer.getLayerId(marker);\r\n          //console.log(\"markerid \" + siteobj.markerid);\r\n          \r\n        }\r\n        if (siteobj.status == \"Inactive\"){\r\n          \r\n          marker = L.marker([lat,lon],{icon:inactiveIcon}).bindPopup(popup);\r\n         \r\n          self.inactiveSites.push(marker);\r\n          //siteobj.markerid = inactivesiteLayer.getLayerId(marker);\r\n          \r\n        }\r\n        if (siteobj.status == \"Proposed\"){\r\n          \r\n          marker = L.marker([lat,lon],{icon:leadIcon}).bindPopup(popup);\r\n         \r\n          self.proposedSites.push(marker);\r\n          //siteobj.markerid = proposedsiteLayer.getLayerId(marker);\r\n          \r\n        } */\n\n        siteobj.marker = sitemarker; //siteobj.markerid = marker._leaflet_id;\n        //self.layers.push(marker);\n        //console.log(siteobj.markerid, marker._latlng);\n      });\n      self.findCenter(this.siteData);\n      activeLayer = new LayerGroup(sitesarr);\n      activeLayer['name'] = \"Active Sites\";\n      self.allOverlays['Active Sites'] = activeLayer;\n      /* var inactivesiteLayer = new L.LayerGroup(this.inactiveSites);\r\n      inactivesiteLayer['name'] = \"Inactive Sites\";\r\n      this.allOverlays[\"Inactive Sites\"] = inactivesiteLayer;\r\n            var proposedsiteLayer = new L.LayerGroup(this.proposedSites);\r\n      proposedsiteLayer['name'] = \"Proposed Sites\";\r\n      this.allOverlays[\"Proposed Sites\"] = proposedsiteLayer; */\n\n      /* this.siteData.forEach(function(s){\r\n        var mkid = s.marker._leaflet_id;\r\n        s.markerid = mkid;\r\n        console.log(s.id, s.markerid);\r\n      }) */\n\n      self.buildLayercontrol(\"Sites\");\n      return true;\n    }\n\n    getAPs() {\n      const self = this;\n      this.apiService.getAdminAps(this.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          var aps = result.data; // var aps = self.createAPsmapobj(); \n\n          self.apData = aps;\n\n          if (self.map) {\n            console.log(\"map is here creating AP objs\");\n            this.createAPsmapobj();\n          }\n\n          return aps;\n        } else {\n          alert('Error fetching APs ' + result.errro);\n        }\n      });\n    }\n\n    createAPsmapobj() {\n      const self = this;\n      console.log(\"creating AP map objects\");\n      const lm = [];\n      let apsarr = [];\n      let radapsarr = [];\n      var activeapLayer = new LayerGroup();\n      /* var inactiveapLayer = new L.LayerGroup();\r\n      var proposedapLayer = new L.LayerGroup();*/\n\n      var activeFreqLayer = new LayerGroup(); //var proposedFreqLayer = new L.LayerGroup(); \n\n      this.apData.forEach(function (apobj) {\n        //console.log(\"creating marker from \"+ JSON.stringify(leadobj));\n        var spopup = \"\";\n        spopup += \"<b>Name: </b>\" + apobj.ap_name + \"</br><b>Position: </b></br>\" + apobj.lat + \", \" + apobj.lon + \"</br>\";\n        spopup += \"<b>Elevation: </b>\" + apobj.ap_elevation_ft + \"</br>\";\n        spopup += \"<b>Azimuth: </b>\" + apobj.azimuth + \"</br>\";\n        spopup += \"<b>Beamwidth: </b>\" + apobj.beamwidth + \"</br>\";\n        spopup += \"<b>Frequency: </b>\" + apobj.frequency_mhz + \"</br>\";\n        spopup += \"<b>Channel Width: </b>\" + apobj.channel_width_mhz + \"</br>\"; //spopup += \"<b>IP: </b>\" + apobj.ip_address;\n        //spopup += \"<b>Status: </b>\" + apobj.Status;\n\n        var lat = Number(apobj.lat);\n        var lon = Number(apobj.lon);\n        var shapellarr = self.apiService.sectorShapes(apobj, 1, null);\n        var shaperadarr = self.apiService.sectorShapes(apobj, 0, null);\n        apsarr.push(shapellarr);\n        radapsarr.push(shaperadarr);\n        var apcolor = '#00ff00'; //console.log(\"got back \" + JSON.stringify(shaperadarr));\n\n        var poly = polygon(shapellarr, {\n          color: apcolor,\n          fillColor: apcolor,\n          fill: true,\n          stroke: true,\n          opacity: 0.85\n        });\n        var radpoly = polygon(shaperadarr, {\n          color: apcolor,\n          fillColor: apcolor,\n          fill: true,\n          stroke: true,\n          opacity: 0.85\n        });\n        poly.bindPopup(spopup);\n        radpoly.bindPopup(spopup); //if(apobj.Status == 'Active'){\n\n        poly.addTo(activeapLayer);\n        radpoly.addTo(activeFreqLayer);\n        self.activeapShapes.push(poly);\n        self.activefreqRad.push(radpoly); //}\n\n        /*  if(apobj.Status == 'Inactive'){\r\n           poly.addTo(inactiveapLayer);\r\n           self.inactiveapShapes.push(poly);\r\n         }\r\n         if(apobj.Status == 'Proposed'){\r\n           poly.addTo(proposedapLayer);\r\n           radpoly.addTo(proposedFreqLayer);\r\n           self.proposedapShapes.push(poly);\r\n           self.proposedfreqRad.push(poly);\r\n         } */\n      });\n      console.log(radapsarr);\n      var activeapLayer = new LayerGroup(this.activeapShapes);\n      var activeFreqLayer = new LayerGroup(this.activefreqRad);\n      activeapLayer['name'] = \"Active APs\";\n      activeFreqLayer['name'] = \"Active - by rad\";\n      this.allOverlays[\"Active APs\"] = activeapLayer;\n      this.allOverlays[\"Active - by rad\"] = activeFreqLayer;\n      /* var inactiveapeLayer = new L.LayerGroup(this.inactiveapShapes);\r\n      inactiveapLayer['name'] = \"Inactive APs\";\r\n      this.allOverlays[\"Inactive APs\"] = inactiveapLayer;\r\n            var proposedapLayer = new L.LayerGroup(this.proposedapShapes);\r\n      var proposedRadLayer = new L.LayerGroup(this.proposedapRad);\r\n      proposedapLayer['name'] = \"Proposed APs\";\r\n      proposedFreqLayer['name'] = \"Basic Radius - Proposed\";\r\n      this.allOverlays[\"Proposed APs\"] = proposedapLayer;\r\n      this.allOverlays[\"Proposed - by rad\"] = proposedFreqLayer; */\n\n      this.buildLayercontrol(\"APs\"); //this.layersControl.overlays.APs = apLayer;\n\n      return true;\n    }\n\n    getNetworkBounds() {\n      const self = this;\n      this.apiService.getAdminNetworkBounds(this.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          const bData = result.data;\n          self.boundsData = bData;\n\n          if (self.map) {\n            console.log(\"map is here creating net bounds objs\");\n            self.buildBoundsLayers();\n          }\n\n          return bData;\n        } else {\n          alert('Error fetching Network Bounds ' + result.errro);\n        }\n      });\n    }\n\n    buildBoundsLayers() {\n      const self = this;\n      const qShapes = [];\n      const netbndsarr = [];\n      const renderer = canvas({\n        padding: 0.5\n      });\n      self.boundsData.forEach(function (layerdata) {\n        let datasetname = '';\n\n        if (layerdata.name == \"wireless\") {\n          datasetname = 'Wireless Bounds';\n        }\n\n        if (layerdata.name == 'licensed') {\n          datasetname = 'Licensed Bounds';\n        }\n\n        if (layerdata.name == 'ulicensed') {\n          datasetname = 'Unlicensed Bounds';\n        }\n\n        if (layerdata.name == 'fiber') {\n          let datasetname = 'Fiber Bounds';\n        }\n\n        if (layerdata.name == 'docsis') {\n          let datasetname = 'Docsis Bounds';\n        }\n\n        if (layerdata.name == 'dsl') {\n          let datasetname = 'DSL Bounds';\n        }\n\n        let qLayer;\n        const geojsonFeature = JSON.parse(layerdata.geojson);\n        const qgeo = geoJSON(geojsonFeature); // console.log('added json layer ' + datasetname);\n\n        qShapes.push(qgeo);\n        qLayer = new LayerGroup(qShapes);\n        qLayer['name'] = datasetname;\n        self.allOverlays[datasetname] = qLayer;\n      }); //self.buildLayercontrol('Network Boundaries');\n\n      self.buildLayercontrol('Network Boundaries');\n    }\n\n    buildTileLayer() {\n      const self = this;\n      let tilename = 'bdc_' + this.org_id; //tilename = 'bdc_fabric';\n\n      self.points_layers = [];\n      const tileurl = 'https://www.regulatorysolutions.us:7801/bdc_fabric.' + tilename; // get the json for the project\n\n      const tjson = 'https://www.regulatorysolutions.us:7800/bdcfabric.' + tilename + '.json';\n      self.mapClickmode = 'street';\n      this.apiService.getTileJson(tilename).subscribe(resp => {\n        let geoType = '';\n        const tablecols = [];\n\n        if (resp.result === 'success') {\n          // console.log('tile json ' + JSON.stringify(resp.json));\n          geoType = resp.json.geometrytype; // console.log('geoType ' + geoType);\n\n          const properties = resp.json.properties;\n          resp.json.properties['geoType'] = geoType;\n          properties.forEach(function (property) {\n            // // console.log('pushing ' + property.name);\n            tablecols.push(property.name);\n          });\n        }\n\n        console.log('building tile layer ' + tilename);\n        const renderer = canvas({\n          padding: 0.5\n        });\n        const vectorTileStyling = {};\n        const vectorTileColor = 'green';\n        let style = {};\n\n        if (geoType === 'Point') {\n          self.points_layers.push(tilename);\n\n          const vstyle = function (properties, zoom) {\n            let serviceable = properties.serviceable;\n\n            if (!serviceable) {\n              style = {\n                'radius': 5,\n                'fill': true,\n                'fillColor': 'blue',\n                'fillOpacity': 0.5,\n                'color': 'blue',\n                'opacity': 0.7,\n                'weight': 2\n              };\n            } else {\n              style = {\n                'radius': 5,\n                'fill': true,\n                'fillColor': vectorTileColor,\n                'fillOpacity': 0.5,\n                'color': vectorTileColor,\n                'opacity': 0.7,\n                'weight': 2\n              };\n            }\n\n            return style;\n          };\n\n          vectorTileStyling['bdc_fabric.' + tilename] = vstyle;\n        }\n\n        vectorTileStyling['bdc_fabric.' + tilename] = {\n          'radius': 5,\n          'fill': true,\n          'fillColor': vectorTileColor,\n          'fillOpacity': 0.5,\n          'color': vectorTileColor,\n          'opacity': 0.7,\n          'weight': 2\n        };\n\n        if (geoType !== 'Point' && geoType !== 'MultiLineString') {\n          vectorTileStyling['bdc_fabric.' + tilename] = {\n            'fill': true,\n            'fillColor': vectorTileColor,\n            'fillOpacity': 0.5,\n            'color': vectorTileColor,\n            'opacity': 0.7,\n            'weight': 2\n          };\n        }\n\n        if (geoType === 'MultiLineString') {\n          vectorTileStyling['bdc_fabric.' + tilename] = resp.style;\n        }\n\n        if (geoType === '') {\n          vectorTileStyling['bdc_fabric.' + tilename] = {\n            'fill': true,\n            'fillColor': vectorTileColor,\n            'fillOpacity': 0.1,\n            'color': vectorTileColor,\n            'opacity': 0.7,\n            'weight': 2,\n            'radius': 1\n          };\n        }\n\n        const vectorTileOptions = {\n          vectorTileLayerStyles: vectorTileStyling,\n          renderer: renderer,\n          zIndex: 1000,\n          interactive: true // Make sure that this VectorGrid fires mouse/pointer events\n\n        };\n        const tlayer = vectorGrid.protobuf(tileurl + '/{z}/{x}/{y}.pbf', vectorTileOptions).on('click', function (e) {\n          //console.log('e ' , e);\n          let popup = '';\n          let pt;\n\n          if (e.target.layers) {\n            pt = e.target.layers.properties;\n          } else {\n            pt = e.layer.properties;\n          }\n\n          popup += '<p><b>Location ID: ' + pt['location_id'] + '</br>' + 'Address: ' + pt['address_primary'] + '</br>';\n          const lat = Number(pt['latitude']);\n          const lon = Number(pt['longitude']);\n          const ltln = new LatLng(lat, lon);\n          const pup = new Popup().setLatLng(ltln);\n          pup.setContent(popup);\n          self.tilelayerPopup = pup;\n          e.sourceTarget.bindPopup(pup);\n          self.map.openPopup(self.tilelayerPopup);\n          /* L.popup()\r\n          .setContent(self.createPopupContent(e.target.name, e.layer.properties, tablecols))\r\n          .setLatLng(e.latlng)\r\n          .openOn(self.map) */\n        });\n        /*  .on('mouseover', function(e){\r\n           //console.log('e ' , e);\r\n           L.popup()\r\n           .setContent(\"<b>Location_ID: \" +e.layer.properties.location_id + \"</b>\")\r\n           .setLatLng(e.latlng)\r\n           .openOn(self.map)\r\n           \r\n         })\r\n         .on('mouseout', function(e){\r\n           //self.map.closePopup();\r\n           e.sourceTarget.closePopup();\r\n           e.target.closePopup();\r\n         }); */\n\n        tlayer['name'] = 'Locations'; //tilename;\n\n        if (geoType === 'Point') {\n          self.points_tile_layers.push(tlayer);\n        }\n        /* self.allLayers.forEach(function(layer) {\r\n          if (layer.name === tilename) {\r\n            layer['columns'] = tablecols;\r\n          }\r\n        }); */\n\n\n        self.allOverlays['Locations'] = tlayer;\n        const foundlayer = false;\n\n        if (foundlayer === false) {\n          self.buildLayercontrol('Locations');\n        } else {// self.checkLayerVisibility(fLayer);\n        }\n\n        return true;\n      });\n    }\n\n    showQualified(loc, loclat, loclon) {\n      const self = this;\n      this.apiService.getLocationAps(self.org_id, loc).subscribe(response => {\n        if (response.result == 'success') {\n          this.qualified = true;\n          this.chtdata = [];\n          var prfcnt = 0;\n          this.showGraphs = true;\n          this.graphsMin = false;\n          this.showQualfrm = false;\n          const aps = response.aps;\n          aps.forEach(function (ap) {\n            console.log(JSON.stringify(ap));\n            var gdata = [];\n            var profarray = ap.profile;\n            var apname = ap.ap_name;\n            var freq = ap.frequency_mhz;\n            ap.distance = Number(ap.distance).toFixed(2);\n            ap.bearing = Number(ap.bearing).toFixed(2);\n            var apid = ap.id;\n            var title = \"Profile from \" + apname + \" (\" + freq + \" MHz) \\nDistance: \" + ap.distance + \"   Bearing: \" + ap.bearing + \" deg\";\n            var shortTitle = apname + \" (\" + freq + \" MHz) \" + ap.distance + \" \" + ap.bearing;\n            ap.title = title;\n            ap.shortTitle = shortTitle;\n            ap.showGraph = true;\n            profarray.forEach(function (profpt) {\n              gdata.push([profpt.distance, profpt.terrain, profpt.clutter, profpt.freznel, profpt.freznel_60, profpt.los]);\n            });\n            prfcnt++;\n            ap.gchtdata = gdata;\n            self.qualprofs.push(ap);\n          });\n          self.createAPqualobj(aps, loc, loclat, loclon);\n        } else {\n          console.log(JSON.stringify(response.error));\n          alert(\"could not get APs for location\");\n        }\n      });\n    }\n\n    createAPqualobj(aps, loc, loclat, loclon) {\n      var self = this; //remove all layers\n\n      this.removeQualobjs();\n      aps.forEach(function (apobj) {\n        var lttbearing;\n\n        if (apobj.bearing < 0) {\n          var b = 360 - -apobj.bearing;\n          lttbearing = 360 - b;\n          apobj.bearing = b;\n        } else {\n          lttbearing = 360 - apobj.bearing;\n        } //console.log(\"creating marker from \"+ JSON.stringify(leadobj));\n\n\n        var spopup = \"AP for Location ID \" + loc + \"<br>\";\n        spopup += \"<b>Name: </b>\" + apobj.ap_name + \"</br><b>Position: </b></br>\" + apobj.lat + \", \" + apobj.lon + \"</br>\";\n        spopup += \"<b>Elevation (ft): </b>\" + apobj.ap_elevation_ft + \"</br>\";\n        spopup += \"<b>Bearing (from AP): </b>\" + Number(apobj.bearing).toFixed(2) + \"</br>\";\n        spopup += \"<b>Bearing (from Lead): </b>\" + lttbearing.toFixed(2) + \"</br>\";\n        spopup += \"<b>Azimuth: </b>\" + apobj.azimuth + \"</br>\";\n        spopup += \"<b>Beamwidth: </b>\" + apobj.beamwidth + \"</br>\";\n        spopup += \"<b>Gain: </b>\" + apobj.ap_antenna_gain + \"</br>\";\n        spopup += \"<b>Frequency: </b>\" + apobj.freqency_mhz + \"</br>\";\n        spopup += \"<b>Channel Width: </b>\" + apobj.channel_width + \"</br>\";\n        spopup += \"<b>TX Pwr (dBm): </b>\" + apobj.tx_power_dbm + \"</br>\";\n        spopup += \"<b>Noise Floor (dBm): </b>\" + apobj.avg_noise_floor_dbm;\n        var lat = Number(apobj.lat);\n        var lon = Number(apobj.lon);\n        var fcolor = Number(apobj.freqency_mhz).toString(16);\n        var shaperadarr = self.apiService.sectorShapes(apobj, 0, null);\n        var radpoly = polygon(shaperadarr, {\n          color: fcolor,\n          fillColor: fcolor,\n          fill: true,\n          stroke: false,\n          opacity: 0.85\n        });\n        radpoly.bindPopup(spopup);\n        self.qualifyObjs.push(radpoly);\n        var radlos = polyline([new LatLng(lat, lon), new LatLng(Number(loclat), Number(loclon))], {\n          color: fcolor,\n          weight: 3,\n          opacity: 1,\n          smoothFactor: 1\n        });\n        radlos.bindPopup(spopup);\n        self.qualifyLos.push(radlos);\n      });\n      var qualapLayer = new LayerGroup(this.qualifyObjs);\n      qualapLayer['name'] = \"Qualify Sectors\";\n      this.allOverlays[\"Qualify Sectors\"] = qualapLayer;\n      var qualloslayer = new LayerGroup(this.qualifyLos);\n      qualloslayer['name'] = \"Qualify Paths\";\n      this.allOverlays[\"Qualify Paths\"] = qualloslayer;\n      this.buildLayercontrol(\"Qualify\");\n      this.onResize(null);\n\n      if (this.showGraphs) {//this.qualifyLead();\n      }\n\n      return true;\n    }\n\n    onResize(event) {\n      //event.target.innerWidth;\n      setTimeout(() => {\n        this.map.invalidateSize();\n      }, 0);\n    }\n\n    removeQualobjs() {\n      var self = this;\n\n      if (this.qualifyObjs && this.qualifyObjs.length > 0) {\n        this.qualifyObjs.forEach(function (qobj) {\n          if (self.allOverlays[\"Qualify Sectors\"].hasLayer(qobj)) {\n            self.allOverlays[\"Qualify Sectors\"].removeLayer(qobj);\n          }\n        });\n        this.qualifyLos.forEach(function (qobj) {\n          if (self.allOverlays[\"Qualify Paths\"].hasLayer(qobj)) {\n            self.allOverlays[\"Qualify Paths\"].removeLayer(qobj);\n          }\n        });\n      }\n\n      this.qualifyObjs = [];\n      this.qualifyLos = [];\n    }\n\n    toggleGraph(p) {\n      p.showGraph = !p.showGraph;\n    }\n\n    chartActivate(data, id) {\n      console.log('Activate', JSON.stringify(data));\n    }\n\n    selectProfile(p) {\n      this.profShow = true;\n      this.bigProfdata = p;\n    }\n\n    closeProfile() {\n      this.profShow = false;\n      this.bigProfdata = [];\n    }\n\n    hideGraphs() {\n      this.graphsMin = !this.graphsMin;\n    }\n\n    profileMousemove(e, p) {\n      var cht = new google.visualization.LineChart(document.getElementById(p.ap.ap_name));\n      console.log(\"in mousemove\");\n      console.dir(e);\n\n      if (e.row) {\n        var dist = p.gchtdata[e.row][0] * 1.609344 * 1000; //in meters\n\n        var aplat = p.ap.lat;\n        var aplon = p.ap.lon;\n        var ang = p.ap.bearing;\n        var vinc = Vincenty.destVincenty(aplat, aplon, ang, dist);\n        var pmarkerlatlon = new LatLng(vinc.lat, vinc.lon);\n        var self = this;\n        this.profMouseObj.forEach(function (pobj) {\n          if (self.allOverlays[\"Profile Marker\"].hasLayer(pobj)) {\n            self.allOverlays[\"Profile Marker\"].removeLayer(pobj);\n          }\n        });\n        this.profMouseObj = [];\n        var marker;\n        var losicon = icon({\n          iconUrl: '/assets/images/crosshair.png',\n          iconSize: [20, 20],\n          iconAnchor: [10, 10]\n        });\n        marker = marker(pmarkerlatlon, {\n          draggable: false,\n          icon: losicon\n        });\n        this.profMouseObj.push(marker);\n        var profObjMarker = new LayerGroup(this.profMouseObj);\n        profObjMarker['name'] = \"Profile Marker\";\n        this.allOverlays[\"Profile Marker\"] = profObjMarker;\n        this.allOverlays[\"Profile Marker\"].addTo(self.map);\n        console.log(\"has row and dist \" + dist);\n      }\n    }\n\n    layerChange(name, isSelected, section) {\n      var self = this; //const lcChecks = (this.form.controls.name as FormArray);\n\n      var lcArray = [];\n      lcArray = this.layerControl;\n\n      if (section == \"Tiles\") {\n        lcArray = this.tileLayers;\n        console.log(\"changing tile layer\");\n      }\n      /* if(section == \"Frequencies\"){\r\n        lcArray = this.frequencyLayers;\r\n      }\r\n      if(section == \"Viewsheds\"){\r\n        lcArray = this.viewShedlayers;\r\n      }\r\n      if(section == \"Qualify\"){\r\n        lcArray = this.qualifyLayers;\r\n      }\r\n      if(section == \"Search Results\"){\r\n        lcArray = this.searchLayers;\r\n      }\r\n      if(section == \"What If\"){\r\n        lcArray = this.whatifLayers;\r\n      } */\n\n\n      var foundlayer = false; //look through each object to see if they need to be turned off\n\n      lcArray.forEach(function (LClayer) {\n        var lcLayername = LClayer.name;\n\n        if (lcLayername == name) {\n          foundlayer = true; //turn off all sublayers if on else turn on sublayers marked as selected\n\n          var lcSublayers = LClayer.layers;\n\n          if (isSelected == true) {\n            LClayer.isSelected = true; //turn on all sublayers currently marked as on\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                var subselect = sublayer.isSelected;\n\n                if (subselect) {\n                  if (self.allOverlays[subname]) {\n                    self.allOverlays[subname].addTo(self.map);\n                  }\n                }\n              });\n            }\n          } else {\n            LClayer.isSelected = false; //turn off all sublayers, but leave their own object isSelected alone\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]);\n                }\n              });\n            }\n\n            LClayer.isSelected = false;\n          }\n        } else {\n          //check all sublayers to see if name is one of those\n          var lcSublayers = LClayer.layers;\n          lcSublayers.forEach(function (sublayer) {\n            var subname = sublayer.name;\n\n            if (name == subname) {\n              foundlayer = true;\n\n              if (isSelected) {\n                if (self.allOverlays[subname]) {\n                  self.allOverlays[subname].addTo(self.map);\n                }\n\n                sublayer.isSelected = true;\n              } else {\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]);\n                }\n\n                sublayer.isSelected = false;\n              }\n            }\n          });\n        }\n      });\n      GlobalVars.layerControl = this.layerControl;\n    }\n\n    selectChange(name, isSelected, section) {\n      var self = this; //const lcChecks = (this.form.controls.name as FormArray);\n\n      var lcArray = [];\n      lcArray = this.layerControl;\n\n      if (section == \"Tiles\") {\n        lcArray = this.tileLayers;\n      }\n      /* if(section == \"Frequencies\"){\r\n        lcArray = this.frequencyLayers;\r\n      }\r\n      if(section == \"Viewsheds\"){\r\n        lcArray = this.viewShedlayers;\r\n      }\r\n      if(section == \"Qualify\"){\r\n        lcArray = this.qualifyLayers;\r\n      }\r\n      if(section == \"Search Results\"){\r\n        lcArray = this.searchLayers;\r\n      }\r\n      if(section == \"Search Results\"){\r\n        lcArray = this.whatifLayers;\r\n      } */\n\n\n      var foundlayer = false; //look through each object to see if they need to be turned off\n\n      lcArray.forEach(function (LClayer) {\n        var lcLayername = LClayer.name;\n\n        if (lcLayername == name) {\n          foundlayer = true; //if checked then mark all sublayers\n\n          var lcSublayers = LClayer.layers;\n\n          if (isSelected == true) {\n            //LClayer.isSelected = true;\n            //turn on all sublayers currently marked as on\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                sublayer.isSelected = true;\n              });\n            }\n\n            self.layerChange(name, LClayer.isSelected, section);\n          } else {\n            //LClayer.isSelected = false;\n            //turn off all sublayers, but leave their own object isSelected alone\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                sublayer.isSelected = false;\n              });\n            }\n\n            self.layerChange(name, false, section); //LClayer.isSelected = false;\n          }\n        }\n      });\n      GlobalVars.layerControl = this.layerControl;\n    }\n\n    toggleQualify() {\n      this.qualShow = !this.qualShow;\n    }\n\n    toggleNetwork() {\n      this.networkShow = !this.networkShow;\n    }\n\n    doMapstuff() {\n      const self = this;\n      this.getSites();\n      this.getAPs(); //this.getTiles();\n\n      this.getNetworkBounds(); //this.buildTileLayer();\n\n      this.getSevicedLocations();\n\n      if (this.activeSites.length > 1) {//this.findCenter(this.activeSites);\n      }\n      /*  if(self.apData){\r\n         self.createAPsmapobj();\r\n       }\r\n       if(self.siteData){\r\n         self.createSitesmapobj();\r\n         this.findCenter(self.siteData);\r\n       }\r\n       if(self.serviceLocs){\r\n         self.createLocationmapobj();\r\n       }\r\n       if(self.boundsData){\r\n         self.buildBoundsLayers();\r\n       } */\n\n    }\n\n  }\n\n  MapComponent.ɵfac = function MapComponent_Factory(t) {\n    return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  MapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapComponent,\n    selectors: [[\"app-map\"]],\n    decls: 43,\n    vars: 18,\n    consts: [[1, \"row\"], [1, \"col-12\", 2, \"border\", \"solid black 1px\", \"height\", \"100%\"], [1, \"small-map-container\"], [3, \"map$\", \"zoom$\", \"move$\", \"mapMove$\"], [2, \"position\", \"absolute\", \"right\", \"10px\", \"top\", \"10px\", \"z-index\", \"998\", 3, \"hidden\"], [1, \"button\", 2, \"height\", \"50px\", \"width\", \"50px\", 3, \"click\"], [3, \"icon\"], [1, \"control-window\", 3, \"hidden\"], [2, \"width\", \"95%\", \"text-align\", \"right\", 3, \"click\"], [2, \"padding\", \"2px\", \"width\", \"95%\"], [1, \"map-control-heading\", 2, \"padding-left\", \"5px\", 3, \"click\"], [\"style\", \"float:right\", 4, \"ngIf\"], [\"style\", \"float: right\", 4, \"ngIf\"], [1, \"row\", 3, \"hidden\"], [1, \"form-check\", \"col-12\"], [4, \"ngFor\", \"ngForOf\"], [3, \"hidden\"], [2, \"position\", \"absolute\", \"bottom\", \"1px\", \"left\", \"5px\", \"z-index\", \"999\", \"background-color\", \"#dbdbdb\", \"font-size\", \"14px\", \"padding\", \"2px\", \"height\", \"25px\", \"width\", \"150px\", \"border-radius\", \"5px\", \"text-align\", \"center\"], [2, \"position\", \"absolute\", \"top\", \"190px\", \"right\", \"33px\", \"height\", \"50px\", \"border\", \"solid 1px\", \"border-bottom-left-radius\", \"10px\", \"border-top-left-radius\", \"10px\", \"z-index\", \"994\", \"background-color\", \"#edf1f7\", \"text-align\", \"center\", \"padding-top\", \"12px\", 3, \"hidden\", \"click\"], [2, \"padding\", \"3px\"], [1, \"col-lg-3\", \"col-sm-12\", 2, \"position\", \"absolute\", \"top\", \"190px\", \"right\", \"20px\", \"height\", \"76.5vh\", \"overflow-y\", \"scroll\", \"z-index\", \"995\", 3, \"hidden\"], [2, \"width\", \"100%\", \"text-align\", \"right\", \"background-color\", \"#dbdbdb\", 3, \"click\"], [1, \"graphwindow\"], [\"style\", \"border:solid 1px\", 4, \"ngFor\", \"ngForOf\"], [2, \"float\", \"right\"], [2, \"position\", \"relative\", \"float\", \"left\"], [1, \"legend-tool\"], [\"nbTooltip\", \"Show/Hide\", 3, \"click\", 4, \"ngIf\"], [\"style\", \"width: 100%; padding-left:3px\", 4, \"ngFor\", \"ngForOf\"], [\"nbTooltip\", \"Show/Hide\", 3, \"click\"], [2, \"width\", \"100%\", \"padding-left\", \"3px\"], [2, \"border\", \"solid 1px\"], [1, \"graph-heading\", 2, \"padding-left\", \"5px\"], [4, \"ngIf\"], [\"style\", \"float:right;z-index:999;\", 4, \"ngIf\"], [\"style\", \"float: right;z-index:999;\", 4, \"ngIf\"], [2, \"height\", \"150px\", \"border\", \"solid 1px\", 3, \"hidden\"], [2, \"width\", \"100%\", \"height\", \"95%\", 3, \"title\", \"type\", \"data\", \"columnNames\", \"options\", \"id\", \"mouseenter\"], [2, \"float\", \"right\", \"z-index\", \"999\"], [3, \"icon\", \"click\"]],\n    template: function MapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"ngx-base-map\", 3);\n        i0.ɵɵlistener(\"map$\", function MapComponent_Template_ngx_base_map_map__3_listener($event) {\n          return ctx.receiveMap($event);\n        })(\"zoom$\", function MapComponent_Template_ngx_base_map_zoom__3_listener($event) {\n          return ctx.receiveZoom($event);\n        })(\"move$\", function MapComponent_Template_ngx_base_map_move__3_listener($event) {\n          return ctx.receiveMove($event);\n        })(\"mapMove$\", function MapComponent_Template_ngx_base_map_mapMove__3_listener($event) {\n          return ctx.receiveMapMove($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_5_listener() {\n          return ctx.showLayercontrol();\n        });\n        i0.ɵɵelement(6, \"fa-icon\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 7)(8, \"div\", 8);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_div_click_8_listener() {\n          return ctx.hideLayercontrol();\n        });\n        i0.ɵɵelement(9, \"fa-icon\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"form\")(12, \"div\")(13, \"div\")(14, \"p\", 10);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_p_click_14_listener() {\n          return ctx.toggleTile();\n        });\n        i0.ɵɵelementStart(15, \"b\");\n        i0.ɵɵtext(16, \"Tile Layers\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, MapComponent_span_17_Template, 2, 1, \"span\", 11);\n        i0.ɵɵtemplate(18, MapComponent_span_18_Template, 2, 1, \"span\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 13)(20, \"div\", 14);\n        i0.ɵɵtemplate(21, MapComponent_div_21_Template, 9, 4, \"div\", 15);\n        i0.ɵɵelement(22, \"br\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\")(24, \"p\", 10);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_p_click_24_listener() {\n          return ctx.toggleNetwork();\n        });\n        i0.ɵɵelementStart(25, \"b\");\n        i0.ɵɵtext(26, \"Network\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(27, MapComponent_span_27_Template, 2, 1, \"span\", 11);\n        i0.ɵɵtemplate(28, MapComponent_span_28_Template, 2, 1, \"span\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"div\", 16)(30, \"div\", 14);\n        i0.ɵɵtemplate(31, MapComponent_div_31_Template, 10, 4, \"div\", 15);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(32, \"div\", 17)(33, \"p\");\n        i0.ɵɵtext(34);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(35, \"div\", 18);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_div_click_35_listener() {\n          return ctx.hideGraphs();\n        });\n        i0.ɵɵelementStart(36, \"span\", 19);\n        i0.ɵɵtext(37, \"Profiles\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(38, \"div\", 20)(39, \"div\", 21);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_div_click_39_listener() {\n          return ctx.hideGraphs();\n        });\n        i0.ɵɵelement(40, \"fa-icon\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"div\", 22);\n        i0.ɵɵtemplate(42, MapComponent_div_42_Template, 7, 10, \"div\", 23);\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"hidden\", ctx.layerControlvisible);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.layergroup);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.layerControlvisible);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.arrowRight);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tileShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tileShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.tileShow);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tileLayers);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", !ctx.networkShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.networkShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.networkShow);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.layerControl);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\"\", ctx.currentLat, \",\", ctx.currentLon, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.graphsMin);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"hidden\", !ctx.showGraphs || ctx.graphsMin);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.arrowRight);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.qualprofs);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.FaIconComponent, i5.BaseMapComponent],\n    styles: [\".leaflet-top,   .leaflet-bottom {\\n  z-index: 997;\\n}\\n\\n  .leaflet-control-zoom {\\n  border: none;\\n}\\n\\n  .leaflet-control-zoom a {\\n  text-decoration: none !important;\\n}\\n\\n  .leaflet-container {\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.small-map-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n.map[_ngcontent-%COMP%] {\\n  height: 100%;\\n  width: 100%;\\n  min-height: 100%;\\n}\\n\\n.coords[_ngcontent-%COMP%] {\\n  height: 35px;\\n  width: 200px;\\n  position: relative;\\n  left: 10px;\\n  bottom: 27px;\\n}\\n\\n.legend-tool[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: flex-end;\\n  z-index: 999;\\n}\\n\\n.mapcontrols[_ngcontent-%COMP%] {\\n  border: solid 2px;\\n  background-color: #edf1f7;\\n  min-height: 800px;\\n  height: 100%;\\n  display: flex;\\n  flex: 1;\\n  padding: 1rem 1.25rem;\\n}\\n\\n.profile[_ngcontent-%COMP%] {\\n  width: 30%;\\n  height: 100%;\\n}\\n\\n.map-control-heading[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border: solid 1px;\\n  background-color: #bbbbbb;\\n  border-radius: 5px;\\n  font-size: 12px;\\n}\\n\\n.map-project-heading[_ngcontent-%COMP%] {\\n  width: 100%;\\n  font-size: 12px;\\n  font-weight: bold;\\n}\\n\\n.control-window[_ngcontent-%COMP%] {\\n  overflow-y: auto;\\n  border: solid 1px;\\n  position: absolute;\\n  right: 10px;\\n  top: 10px;\\n  z-index: 997;\\n  width: 300px;\\n  display: block;\\n  height: auto;\\n  border-radius: 10px;\\n  padding: 15px;\\n  background-color: #dbdbdb;\\n}\\n\\n.theme-window[_ngcontent-%COMP%] {\\n  height: 90%;\\n}\\n\\n.info-window[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  flex-grow: 1;\\n  position: absolute;\\n  right: 36px;\\n  top: 110px;\\n  z-index: 900;\\n  width: 100%;\\n  height: 85%;\\n  padding-left: 5px;\\n  background-color: #dbdbdb;\\n  overflow: hidden;\\n}\\n\\n.sub-control-window[_ngcontent-%COMP%] {\\n  position: relative;\\n  width: 100%;\\n  margin-top: 5px;\\n  overflow-y: scroll;\\n  height: 60%;\\n}\\n\\n.leadwindow[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  border-radius: 20px;\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n  padding-left: 10px;\\n  padding-right: 10px;\\n  margin-right: 3px;\\n}\\n\\n.graphwindow[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  min-height: 20vh;\\n  overflow-y: scroll;\\n}\\n\\n.profilewindow[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  max-height: 35vh;\\n  height: 25vh;\\n  width: 100%;\\n}\\n\\n.profilewindowtest[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  border-radius: 20px;\\n  width: 100%;\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n  padding-right: 10px;\\n  padding-left: 10px;\\n  margin-right: 3px;\\n}\\n\\n.graph-heading[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border: solid 1px;\\n  background-color: #7f7f7f;\\n}\\n\\n.lcUl[_ngcontent-%COMP%] {\\n  list-style-type: none;\\n  margin: 0;\\n  padding: 0;\\n  font-size: 12px;\\n  width: 100%;\\n}\\n\\n.lcLi[_ngcontent-%COMP%] {\\n  list-style-type: none;\\n  margin: 5px;\\n  padding: 0;\\n  font-size: 12px;\\n  width: 100%;\\n}\\n\\n[hidden][_ngcontent-%COMP%] {\\n  display: none;\\n}\"]\n  });\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}