{"ast":null,"code":"import { Map, DomUtil, polyline, polygon, FeatureGroup, featureGroup, LatLng, tileLayer, icon, canvas, geoJSON, circleMarker, LayerGroup, marker, Popup, vectorGrid, DomEvent, latLng } from 'leaflet';\nimport { GlobalVars } from '../common/globals';\nimport 'leaflet-bing-layer';\nimport 'leaflet.vectorgrid'; //import { GoogleChartComponent } from 'angular-google-charts';\n\nimport { faLayerGroup, faArrowRight, faArrowLeft, faEye, faEyeSlash, faExpand, faXmark, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport * as Vincenty from 'node-vincenty';\nimport { Observable, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"angular-google-charts\";\nimport * as i5 from \"@fortawesome/angular-fontawesome\";\nimport * as i6 from \"../base-map/base-map.component\";\n\nfunction MapComponent_span_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 60);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r0.angleDown);\n  }\n}\n\nfunction MapComponent_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 60);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r1.angleUp);\n  }\n}\n\nfunction MapComponent_div_24_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_24_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const toplayer_r10 = i0.ɵɵnextContext().$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.layerChange(toplayer_r10.name, false, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r11.eye);\n  }\n}\n\nfunction MapComponent_div_24_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_24_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const toplayer_r10 = i0.ɵɵnextContext().$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.layerChange(toplayer_r10.name, true, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r12.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_24_div_8_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_24_div_8_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const sublayer_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.layerChange(sublayer_r20.name, false, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r21.eye);\n  }\n}\n\nfunction MapComponent_div_24_div_8_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_24_div_8_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const sublayer_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r26.layerChange(sublayer_r20.name, true, \"Tiles\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r22.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_24_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 61)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 62);\n    i0.ɵɵtemplate(5, MapComponent_div_24_div_8_span_5_Template, 2, 1, \"span\", 63);\n    i0.ɵɵtemplate(6, MapComponent_div_24_div_8_span_6_Template, 2, 1, \"span\", 63);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const sublayer_r20 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(sublayer_r20.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", sublayer_r20.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !sublayer_r20.isSelected);\n  }\n}\n\nfunction MapComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"span\", 61)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 62);\n    i0.ɵɵtemplate(5, MapComponent_div_24_span_5_Template, 2, 1, \"span\", 63);\n    i0.ɵɵtemplate(6, MapComponent_div_24_span_6_Template, 2, 1, \"span\", 63);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵtemplate(8, MapComponent_div_24_div_8_Template, 7, 3, \"div\", 64);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toplayer_r10 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(toplayer_r10.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", toplayer_r10.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !toplayer_r10.isSelected);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", toplayer_r10.layers);\n  }\n}\n\nfunction MapComponent_span_31_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 60);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r3.angleDown);\n  }\n}\n\nfunction MapComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 60);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r4.arrow - ctx_r4.ios - ctx_r4.upward - ctx_r4.outline);\n  }\n}\n\nfunction MapComponent_div_35_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_35_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r35);\n      const toplayer_r29 = i0.ɵɵnextContext().$implicit;\n      const ctx_r33 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r33.layerChange(toplayer_r29.name, false, \"Qualify\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r30 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r30.eye);\n  }\n}\n\nfunction MapComponent_div_35_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_35_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r38);\n      const toplayer_r29 = i0.ɵɵnextContext().$implicit;\n      const ctx_r36 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r36.layerChange(toplayer_r29.name, true, \"Qualify\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r31 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r31.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_35_div_8_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r44 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_35_div_8_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r44);\n      const sublayer_r39 = i0.ɵɵnextContext().$implicit;\n      const ctx_r42 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r42.layerChange(sublayer_r39.name, false, \"Qualify\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r40 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r40.eye);\n  }\n}\n\nfunction MapComponent_div_35_div_8_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r47 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_35_div_8_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r47);\n      const sublayer_r39 = i0.ɵɵnextContext().$implicit;\n      const ctx_r45 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r45.layerChange(sublayer_r39.name, true, \"Qualify\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r41 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r41.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_35_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 61)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 62);\n    i0.ɵɵtemplate(5, MapComponent_div_35_div_8_span_5_Template, 2, 1, \"span\", 63);\n    i0.ɵɵtemplate(6, MapComponent_div_35_div_8_span_6_Template, 2, 1, \"span\", 63);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const sublayer_r39 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(sublayer_r39.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", sublayer_r39.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !sublayer_r39.isSelected);\n  }\n}\n\nfunction MapComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"span\", 61)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 62);\n    i0.ɵɵtemplate(5, MapComponent_div_35_span_5_Template, 2, 1, \"span\", 63);\n    i0.ɵɵtemplate(6, MapComponent_div_35_span_6_Template, 2, 1, \"span\", 63);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵtemplate(8, MapComponent_div_35_div_8_Template, 7, 3, \"div\", 64);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toplayer_r29 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(toplayer_r29.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", toplayer_r29.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !toplayer_r29.isSelected);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", toplayer_r29.layers);\n  }\n}\n\nfunction MapComponent_span_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 60);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r6.angleDown);\n  }\n}\n\nfunction MapComponent_span_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 60);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r7.angleUp);\n  }\n}\n\nfunction MapComponent_div_45_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r54 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_45_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r54);\n      const toplayer_r48 = i0.ɵɵnextContext().$implicit;\n      const ctx_r52 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r52.layerChange(toplayer_r48.name, false, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r49 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r49.eye);\n  }\n}\n\nfunction MapComponent_div_45_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r57 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_45_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r57);\n      const toplayer_r48 = i0.ɵɵnextContext().$implicit;\n      const ctx_r55 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r55.layerChange(toplayer_r48.name, true, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r50 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r50.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_45_div_8_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r63 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_45_div_8_span_5_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r63);\n      const sublayer_r58 = i0.ɵɵnextContext().$implicit;\n      const ctx_r61 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r61.layerChange(sublayer_r58.name, false, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r59 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r59.eye);\n  }\n}\n\nfunction MapComponent_div_45_div_8_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r66 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 65);\n    i0.ɵɵlistener(\"click\", function MapComponent_div_45_div_8_span_6_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r66);\n      const sublayer_r58 = i0.ɵɵnextContext().$implicit;\n      const ctx_r64 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r64.layerChange(sublayer_r58.name, true, \"Network\"));\n    });\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r60 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r60.eyeSlash);\n  }\n}\n\nfunction MapComponent_div_45_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 66)(1, \"div\", 61)(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 62);\n    i0.ɵɵtemplate(5, MapComponent_div_45_div_8_span_5_Template, 2, 1, \"span\", 63);\n    i0.ɵɵtemplate(6, MapComponent_div_45_div_8_span_6_Template, 2, 1, \"span\", 63);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const sublayer_r58 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(sublayer_r58.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", sublayer_r58.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !sublayer_r58.isSelected);\n  }\n}\n\nfunction MapComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"span\", 61)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 62);\n    i0.ɵɵtemplate(5, MapComponent_div_45_span_5_Template, 2, 1, \"span\", 63);\n    i0.ɵɵtemplate(6, MapComponent_div_45_span_6_Template, 2, 1, \"span\", 63);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵtemplate(8, MapComponent_div_45_div_8_Template, 7, 3, \"div\", 64);\n    i0.ɵɵelement(9, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const toplayer_r48 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(toplayer_r48.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", toplayer_r48.isSelected);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !toplayer_r48.isSelected);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.filterSublayers(true, toplayer_r48.layers));\n  }\n}\n\nfunction MapComponent_div_183_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const p_r67 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", p_r67.shortTitle, \" \");\n  }\n}\n\nfunction MapComponent_div_183_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 74);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r69 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r69.angleDown);\n  }\n}\n\nfunction MapComponent_div_183_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 74);\n    i0.ɵɵelement(1, \"fa-icon\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r70 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"icon\", ctx_r70.angleUp);\n  }\n}\n\nfunction MapComponent_div_183_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r73 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 67)(1, \"p\", 68);\n    i0.ɵɵtemplate(2, MapComponent_div_183_span_2_Template, 2, 1, \"span\", 69);\n    i0.ɵɵtemplate(3, MapComponent_div_183_span_3_Template, 2, 1, \"span\", 70);\n    i0.ɵɵtemplate(4, MapComponent_div_183_span_4_Template, 2, 1, \"span\", 71);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 72)(6, \"google-chart\", 73);\n    i0.ɵɵlistener(\"error\", function MapComponent_div_183_Template_google_chart_error_6_listener($event) {\n      i0.ɵɵrestoreView(_r73);\n      const ctx_r72 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r72.onError($event));\n    })(\"mouseover\", function MapComponent_div_183_Template_google_chart_mouseover_6_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r73);\n      const p_r67 = restoredCtx.$implicit;\n      const ctx_r74 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r74.profileMousemove($event, p_r67));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const p_r67 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !p_r67.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !p_r67.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", p_r67.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !p_r67.showGraph);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"title\", p_r67.title)(\"type\", \"ComboChart\")(\"data\", p_r67.gchtdata)(\"columns\", ctx_r9.gchtColumns)(\"options\", p_r67.gchtoptions);\n  }\n}\n\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    constructor(apiService, router) {\n      this.apiService = apiService;\n      this.router = router;\n      this.org_id = GlobalVars.org_id;\n      this.url = 'https://app.regulatorysolutions.us/data/searchLocations/' + this.org_id;\n      this.locSearch = '';\n      this.bt = localStorage.getItem('bdcToken');\n      this.searchTerms = new Subject();\n      this.searchApTerms = new Subject();\n      this.searchTowerTerms = new Subject();\n      this.selLocation = '';\n      this.flag = true;\n      this.selFlag = true;\n      this.searchtype = 'locations';\n      this.showClutter30 = false;\n      this.showClutter10 = false;\n      this.layergroup = faLayerGroup;\n      this.arrowRight = faArrowRight;\n      this.arrowLeft = faArrowLeft;\n      this.angleDown = faChevronDown;\n      this.angleUp = faChevronUp;\n      this.eye = faEye;\n      this.eyeSlash = faEyeSlash;\n      this.expand = faExpand;\n      this.close = faXmark;\n      this.company = GlobalVars.company;\n      this.colorScheme = {\n        domain: ['#8B4513', '#00ff00', '#0000ff', '#ff0000']\n      };\n      this.gchtOptions = {\n        colors: ['#8B4513', '#00ff00', '#0000ff', '#ff00ff', '#ff0000'],\n        crosshair: {\n          trigger: 'both',\n          orientation: 'vertical'\n        },\n        selectionMode: 'multiple',\n        focusTarget: 'category',\n        legend: {\n          position: 'bottom'\n        },\n        vAxis: {\n          title: 'Elevation'\n        },\n        hAxis: {\n          title: 'Distance'\n        },\n        seriesType: 'line',\n        series: {\n          0: {\n            type: 'area'\n          },\n          1: {\n            type: 'line'\n          }\n        }\n      };\n      this.activeapShapes = [];\n      this.activefreqRad = [];\n      this.points_layers = [];\n      this.points_tile_layers = [];\n      this.activeSites = [];\n      this.showBest = false;\n      this.qualShow = false;\n      this.networkShow = true;\n      this.gchtColumns = ['Distance', 'Terrain', 'Clutter', 'Freznel', 'Freznel_60', 'LOS'];\n      this.qualified = false;\n      this.chtdata = [];\n      this.showGraphs = false;\n      this.graphsMin = false;\n      this.showQualfrm = false;\n      this.qualprofs = [];\n      this.profShow = false;\n      this.frequency_colors = [];\n      this.zoom = 10;\n      this.mapZoom = 5;\n      this.mapCenter = new LatLng(39.147079, -97.185059);\n      this.allOverlays = {};\n      this.bingMapskey = 'AtbnqglVZkEBgFD6RbmKGM_0Oql2dMKxk5Kf-eKyLn_rIZhaUxnvBdExbrNFsJD-'; // mapCenter = L.latLng( { lat: 39.147079, lng: -97.185059 } );\n\n      this.mapOptions = {};\n      this.options = {\n        zoom: this.mapZoom,\n        center: this.mapCenter,\n        noWrap: true\n      };\n      this.tileLayers = [{\n        'name': 'Base Maps',\n        'isSelected': true,\n        'category': 'tiles',\n        'singleSelect': 1,\n        'layers': [{\n          'name': 'OSM Roads',\n          'isSelected': true,\n          'zIndex': 1\n        }, {\n          'name': 'Aerial Hybrid',\n          'isSelected': false,\n          'zIndex': 1\n        }, {\n          'name': 'Terrain',\n          'isSelected': false,\n          'zIndex': 4\n        }, {\n          'name': 'Clutter',\n          'isSelected': false,\n          'zIndex': 3\n        } //{'name': 'Clutter30', 'isSelected': false, 'zIndex': 2},\n        ]\n      }, {\n        'name': 'Overlays',\n        'isSelected': false,\n        'category': 'tiles',\n        'singleSelect': 0,\n        'layers': [{\n          'name': 'Roads',\n          'isSelected': false,\n          'zIndex': 10\n        }]\n      }];\n      this.basicLayers = [{\n        'name': 'Sites',\n        'isSelected': true,\n        'category': 'network',\n        'layers': [{\n          'name': 'Active Sites',\n          'isSelected': true,\n          'show': true\n        }\n        /*  {'name':'Proposed Sites','isSelected':true},\r\n         {'name':'Inactive Sites','isSelected':false}  */\n        ]\n      }, {\n        'name': 'APs',\n        'isSelected': false,\n        'category': 'network',\n        'layers': [{\n          'name': 'Active APs',\n          'isSelected': false,\n          'show': true\n        }, {\n          'name': 'AP Frequency',\n          'isSelected': false,\n          'show': true\n        }\n        /* {'name':'Proposed APs','isSelected':true},\r\n        {'name':'Inactive APs','isSelected':false} */\n        ]\n      }, {\n        'name': 'cnHeat',\n        'isSelected': false,\n        'category': 'network',\n        'layers': [{\n          'name': 'cnHeat Polygons',\n          'isSelected': false,\n          'show': false\n        }]\n      }, {\n        'name': 'Network Boundaries',\n        'isSelected': false,\n        'category': 'network',\n        'layers': [{\n          'name': 'Wireless Bounds',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Unlicensed Bounds',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Licensed Bounds',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Fiber Bounds',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'DOCSIS Bounds',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'DSL Bounds',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Copper Bounds',\n          'isSelected': false,\n          'show': false\n        }]\n      }, {\n        'name': 'Locations',\n        'isSelected': true,\n        'category': 'network',\n        'layers': [{\n          'name': 'All Locations',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Serviceable Locations',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'cnHeat Locations',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Fiber Locations',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Cable Locations',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'DSL Locations',\n          'isSelected': false,\n          'show': false\n        }, {\n          'name': 'Copper Locations',\n          'isSelected': false,\n          'show': false\n        }]\n      }];\n      this.allLayers = []; // placeholder layers array for things like los lines, sector coverage objects, what-if, etc\n\n      this.analysisLayers = [{\n        'name': 'Analysis Layers',\n        'isSelected': false,\n        'category': 'analysis',\n        'layers': [{\n          'name': 'Qualify APs',\n          'isSelected': false\n        }]\n      }]; //placeholder for qualfiy layers\n\n      this.qualifyLayers = [{\n        'name': \"Qualify\",\n        'isSelected': true,\n        'category': 'qualify',\n        'layers': [{\n          'name': 'Qualify Paths',\n          'isSelected': true\n        }, {\n          'name': 'Qualify APs',\n          'isSelected': true\n        }]\n      }]; // layercontrol stuff\n\n      this.layerControlvisible = false;\n      this.tileShow = true;\n      this.datasetsShow = true;\n      this.mydataShow = true;\n      this.osm = tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        detectRetina: true,\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      });\n      this.stamenToner = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 20\n      });\n      this.stamenTerrainBg = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}{r}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 18\n      });\n      this.stamenTopoRelief = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toposm-color-relief/{z}/{x}/{y}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 20,\n        bounds: [[22, -132], [51, -56]]\n      });\n      this.esriRelief = tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri',\n        maxZoom: 13\n      });\n      this.esriWorldImagery = tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n      });\n      this.stamenTonerHybrid = tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-hybrid/{z}/{x}/{y}{r}.png', {\n        attribution: 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n        subdomains: 'abcd',\n        minZoom: 0,\n        maxZoom: 20\n      });\n      this.clutterTiles = tileLayer.wms('https://services.terrascope.be/wms/v2', {\n        layers: 'WORLDCOVER_2021_MAP',\n        transparent: true,\n        opacity: 0.5\n      });\n      this.clutterTiles30 = tileLayer.wms('https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2019_Land_Cover_L48/wms', {\n        layers: 'NLCD_2019_Land_Cover_L48',\n        transparent: true,\n        opacity: 0.5\n      });\n      this.evaIcons = [];\n      this.layers = [this.stamenToner];\n      this.layersControl = {\n        baseLayers: {\n          'Street Map': this.stamenToner\n        },\n        overlays: {}\n      };\n      this.mapState = {};\n      this.projData = null;\n      this.infowindow = false;\n      this.selectionwindow = false;\n      this.sitedatatext = '';\n      this.infowindowobj = {};\n      this.streetviewobjs = [];\n      this.streetviewlines = [];\n      this.objCenter = {};\n      this.drawnItems = featureGroup();\n      this.drawOptions = {\n        draw: {\n          rectangle: {\n            shapeOptions: {\n              color: '#85bb65'\n            }\n          }\n        },\n        edit: {\n          featureGroup: this.drawnItems\n        }\n      };\n    }\n\n    receiveMap(map) {\n      const self = this;\n      this.map = map;\n      console.log(\"Setting map to mapCenter \" + this.mapCenter.lat + \"/\" + this.mapCenter.lng);\n      this.map.setView(this.mapCenter, 5);\n      this.layerControl = this.basicLayers;\n      this.getTiles();\n      this.map.createPane('locations');\n      this.map.getPane('locations').style.zIndex = '690';\n      this.map.createPane('qualify');\n      this.map.getPane('qualify').style.zIndex = '699'; // this.buildLayer(this.appSiteobjs,'Sites');\n\n      self.doMapstuff();\n      /*  else{\r\n         const centerlat = this.activeSites[0].lat;\r\n         const centerlon = this.activeSites[0].lon;\r\n         self.map.setView(new LatLng(centerlat,centerlon ),14);\r\n       }  */\n    }\n\n    receiveZoom(zoom) {\n      this.zoom = zoom;\n      console.log(\"zoom \" + this.zoom);\n\n      if (this.zoom >= 16) {\n        /* if(this.map.hasLayer(this.allOverlays[\"Application Sites\"])){\r\n          this.map.removeLayer(this.allOverlays[\"Application Sites\"]);\r\n          this.allOverlays[\"Application Sites_icon\"].addTo(this.map);\r\n                }  */\n\n        /*  if(this.map.hasLayer(this.allOverlays[\"Sites\"])){\r\n           this.map.removeLayer(this.allOverlays[\"Sites\"]);\r\n           this.allOverlays[\"Sites_icon\"].addTo(this.map);\r\n                  }  */\n      } else {\n        /* if(this.map.hasLayer(this.allOverlays[\"Application Sites_icon\"])){\r\n          this.map.removeLayer(this.allOverlays[\"Application Sites_icon\"]);\r\n          this.allOverlays[\"Application Sites\"].addTo(this.map);\r\n                } */\n\n        /*  if(this.map.hasLayer(this.allOverlays[\"Sites_icon\"])){\r\n           this.map.removeLayer(this.allOverlays[\"Sites_icon\"]);\r\n           this.allOverlays[\"Sites\"].addTo(this.map);\r\n                  } */\n      }\n    }\n\n    receiveMove(move) {\n      this.currentLat = move.lat.toFixed(5);\n      this.currentLon = move.lng.toFixed(5);\n    }\n\n    receiveMapMove(e) {\n      console.log(e);\n      this.latlngBnds = e;\n    }\n\n    findCenter(points) {\n      const self = this;\n      const latlngBnds = this.map.getBounds();\n      let maxlat = 0;\n      let minlat = 0;\n      let minlon = 0;\n      let maxlon = 0;\n      let centerlat = 0;\n      let centerlon = 0;\n      let ptArray = [];\n      let zoom = 16;\n      let ptcnt = 0;\n      points.forEach(function (pt) {\n        ptcnt++;\n        /* if (ptcnt == 1){\r\n          minlat = pt.lat;\r\n          maxlat = pt.lat;\r\n          minlon = pt.lon;\r\n          maxlon = pt.lon;\r\n        }else{\r\n          if(pt.lat > maxlat){\r\n            maxlat = pt.lat;\r\n          }\r\n          if(pt.lat < minlat){\r\n            minlat = pt.lat;\r\n          }\r\n          if(pt.lon > maxlon){\r\n            maxlon = pt.lon;\r\n          }\r\n          if(pt.lon < minlon){\r\n            minlon = pt.lon;\r\n          }\r\n                }\r\n                if (ptcnt == points.length){\r\n          let latinc = (maxlat - minlat)/2;\r\n          let loninc = ((-minlon) - (-maxlon))/2;\r\n                  centerlat = minlat + latinc;\r\n          centerlon = maxlon - loninc;\r\n                  minlat = minlat - 0.025;\r\n          maxlat = maxlat + 0.025;\r\n          minlon = minlon - 0.025;\r\n          maxlon = maxlon + 0.025;\r\n                  \r\n          \r\n          self.map.setView(new LatLng(centerlat, centerlon ),zoom);\r\n                } */\n\n        ptArray.push([pt.lat, pt.lon]);\n      });\n\n      if (ptArray.length == 1) {\n        this.map.setView(new LatLng(ptArray[0][0], ptArray[0][1]), 5);\n      } else {\n        console.log(\"fitting bounds to \" + ptArray.length);\n        self.map.fitBounds(ptArray);\n      }\n    }\n\n    showLayercontrol() {\n      this.layerControlvisible = !this.layerControlvisible;\n    }\n\n    toggleTile() {\n      this.tileShow = !this.tileShow;\n    }\n\n    toggleDatasets() {\n      this.datasetsShow = !this.datasetsShow;\n    }\n\n    tilelayerChange(name, isSelected, section) {\n      const self = this; // const lcChecks = (this.form.controls.name as FormArray);\n\n      let lcArray = [];\n      lcArray = this.layerControl;\n\n      if (section === 'Tiles') {\n        lcArray = this.tileLayers; // console.log('changing tile layer');\n      }\n\n      let foundlayer = false; // look through each object to see if they need to be turned off\n\n      lcArray.forEach(function (LClayer) {\n        const lcLayername = LClayer.name;\n\n        if (lcLayername === name) {\n          foundlayer = true; // turn off all sublayers if on else turn on sublayers marked as selected\n\n          const lcSublayers = LClayer.layers;\n\n          if (isSelected === true) {\n            LClayer.isSelected = true; // turn on all sublayers currently marked as on\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                const subname = sublayer.name;\n                const subselect = sublayer.isSelected;\n\n                if (subselect) {\n                  if (self.allOverlays[subname]) {\n                    if (sublayer.zIndex) {\n                      self.allOverlays[subname].setZIndex(sublayer.zIndex);\n                    }\n\n                    self.allOverlays[subname].addTo(self.map);\n                  }\n                }\n              });\n            }\n          } else {\n            LClayer.isSelected = false; // turn off all sublayers, but leave their own object isSelected alone\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                const subname = sublayer.name;\n\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]);\n                }\n              });\n            }\n\n            LClayer.isSelected = false;\n          }\n        } else {\n          // check all sublayers to see if name is one of those\n          const lcSublayers = LClayer.layers;\n          lcSublayers.forEach(function (sublayer) {\n            const subname = sublayer.name;\n\n            if (name === subname) {\n              foundlayer = true;\n\n              if (isSelected) {\n                // now see if it is a singleSelect and turn off other layers if it is\n                if (LClayer.singleSelect && LClayer.singleSelect === 1) {\n                  self.turnOffOtherLayers(subname, lcSublayers);\n                }\n\n                if (self.allOverlays[subname]) {\n                  if (sublayer.zIndex) {\n                    self.allOverlays[subname].setZIndex(sublayer.zIndex);\n                  }\n\n                  self.allOverlays[subname].addTo(self.map);\n                }\n\n                sublayer.isSelected = true;\n              } else {\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]);\n                }\n\n                sublayer.isSelected = false;\n              }\n            }\n          });\n        }\n      }); //GlobalVars.layerControl = this.layerControl;\n    } // turns off other layers in a layer group if only one is supposed to be on at a time\n\n\n    turnOffOtherLayers(name, layers) {\n      const self = this;\n      layers.forEach(function (sublayer) {\n        const subname = sublayer.name;\n\n        if (subname !== name) {\n          if (self.map.hasLayer(self.allOverlays[subname])) {\n            // var zindex =\n            self.map.removeLayer(self.allOverlays[subname]);\n          }\n\n          sublayer.isSelected = false;\n        }\n      });\n    }\n\n    getTiles() {\n      // const activeLayer = new L.LayerGroup();\n      const hybridLayer = tileLayer.bing({\n        'bingMapsKey': this.bingMapskey,\n        'imagerySet': 'AerialWithLabels'\n      });\n      this.osm['name'] = 'OSM Roads';\n      hybridLayer['name'] = 'Aerial Hybrid';\n      this.stamenTopoRelief['name'] = 'Terrain';\n      this.stamenTonerHybrid['name'] = 'Roads';\n      this.stamenToner['name'] = 'Roads'; //this.allOverlays['OSM Roads'] = this.osm;\n\n      this.allOverlays['OSM Roads'] = this.stamenToner;\n      this.allOverlays['Aerial Hybrid'] = hybridLayer;\n      this.allOverlays['Terrain'] = this.esriRelief; //this.allOverlays['Roads'] = this.stamenTonerHybrid;\n\n      this.allOverlays['Roads'] = this.stamenToner;\n      this.allOverlays['Clutter'] = this.clutterTiles;\n      this.allOverlays['Clutter30'] = this.clutterTiles30;\n      this.buildLayercontrol('Tiles');\n    }\n\n    buildLayercontrol(l) {\n      var self = this;\n      console.log(\"building lc for \" + l);\n      var lcArray = [];\n      lcArray = this.layerControl;\n\n      if (l == 'Tiles') {\n        lcArray = this.tileLayers;\n      }\n\n      if (l == 'Qualify') {\n        lcArray = this.qualifyLayers;\n      }\n      /*if(l == 'Frequencies'){\r\n        lcArray = this.frequencyLayers;\r\n      }\r\n      \r\n      if (l == 'Viewsheds'){\r\n        lcArray = this.viewShedlayers;\r\n            }\r\n            if (l == 'Search Results'){\r\n        lcArray = this.searchLayers;\r\n            }\r\n            if (l == 'What If'){\r\n        lcArray = this.whatifLayers;\r\n            } */\n      //const lcChecks = (this.form.controls.name as FormArray);\n\n\n      lcArray.forEach(function (LClayer) {\n        var lcLayername = LClayer.name;\n\n        if (lcLayername == l) {\n          var lcSublayers = LClayer.layers;\n\n          if (LClayer.isSelected) {\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                var subselect = sublayer.isSelected;\n\n                if (subselect) {\n                  if (self.allOverlays[subname]) {\n                    console.log(\"adding subname \" + subname);\n                    /*if(subname == \"Qualify APs\"){\r\n                      self.allOverlays[subname].setZIndex(1);\r\n                      self.allOverlays[\"Serviceable Locations\"].setZIndex(999);\r\n                    }\r\n                    if(subname == \"Serviceable Locations\"){\r\n                      self.allOverlays[subname].setZIndex(999);\r\n                    } */\n\n                    self.allOverlays[subname].addTo(self.map);\n                    /* if (subname == \"Qualify APs\") {\r\n                      self.allOverlays[subname].setZIndex(1);\r\n                      self.allOverlays[\"Serviceable Locations\"].bringToFront();\r\n                    } */\n                  }\n                }\n              });\n            }\n          } else {\n            if (l == 'Tiles') {\n              if (lcSublayers.length > 0) {}\n            }\n          }\n        } else {\n          if (l == 'Tiles') {\n            var lcSublayers = LClayer.layers;\n\n            if (LClayer.isSelected) {\n              if (lcSublayers.length > 0) {\n                lcSublayers.forEach(function (sublayer) {\n                  var subname = sublayer.name;\n                  var subselect = sublayer.isSelected;\n\n                  if (subselect) {\n                    if (self.allOverlays[subname]) {\n                      console.log(\"adding subname \" + subname);\n                      self.allOverlays[subname].addTo(self.map);\n                    }\n                  }\n                });\n              }\n            }\n          }\n        }\n      });\n    }\n\n    hideLayercontrol() {\n      this.layerControlvisible = false;\n    }\n\n    filterSublayers(show, layers) {\n      return layers.filter(x => x.show == show);\n    } // Map Functions\n\n\n    getCoords(e) {\n      this.currentLat = e.latlng.lat.toFixed(5);\n      this.currentLon = e.latlng.lng.toFixed(5); // console.log(this.currentLat, this.currentLon);\n    }\n\n    mapMoveEnd(map) {\n      this.mapCenter = this.map.getCenter(); //GlobalVars.mapCenter = this.mapCenter;\n\n      this.mapState = {\n        'mapCenter': this.map.getCenter(),\n        'mapZoom': this.map.getZoom()\n      };\n      localStorage.setItem('mapState', JSON.stringify(this.mapState)); // console.log('current center is ' + this.mapCenter);\n    }\n\n    mapZoomEnd(map) {\n      this.mapZoom = this.map.getZoom(); //GlobalVars.mapZoom = this.mapZoom;\n\n      this.mapState = {\n        'mapCenter': this.map.getCenter(),\n        'mapZoom': this.map.getZoom()\n      };\n      localStorage.setItem('mapState', JSON.stringify(this.mapState));\n    }\n\n    ngOnInit() {\n      this.layerControl = this.basicLayers;\n      /* this.locations = this.searchTerms.pipe(\r\n        debounceTime(500),       // wait for 300ms pause in events\r\n        distinctUntilChanged(),   // ignore if next search term is same as previous\r\n        switchMap(term => { //term}   // switch to new observable each time\r\n          if(this.searchtype == 'locations'){\r\n            return this.apiService.locationSearch(this.org_id,term)\r\n          }\r\n          if(this.searchtype == 'aps'){\r\n            let filteredaps: any = [];\r\n            filteredaps = this.apData.filter(x => x.ap_name.toLowerCase().includes(term.toLowerCase()));\r\n            let faps = [];\r\n            faps.push(filteredaps);\r\n            return faps;\r\n          }\r\n          if(this.searchtype == 'towers'){\r\n            let filteredsites = this.siteData.filter(obj => obj.name.toLowerCase().includes(term.toLowerCase()));\r\n            let fsites = [];\r\n            fsites.push(filteredsites);\r\n                    return fsites;\r\n                }\r\n          })\r\n        \r\n      ); */\n    } //change the search type\n\n\n    changeSearch(st) {\n      console.log(\"changing searchtype \" + st);\n      this.searchtype = st;\n      this.newSearch();\n      this.selLocation = '';\n    }\n\n    searchAps(term) {\n      this.selFlag = true;\n      this.searchApTerms.next(term);\n    }\n\n    searchTowers(term) {\n      this.selFlag = true; //const test = this.siteData.filter(x => x.name.toLowerCase().includes(term.toLowerCase()));\n      //console.log(JSON.stringify(test));\n\n      this.searchTowerTerms.next(term);\n      console.log(this.searchTowerTerms);\n    } // Push a search term into the observable stream.  \n\n\n    searchLocation(term) {\n      this.selFlag = true;\n      this.searchTerms.next(term);\n    }\n\n    onselectLocation(locObj) {\n      if (this.searchtype == 'locations') {\n        if (locObj.location_id != 0) {\n          this.selLocation = locObj.location_id + \" - \" + locObj.address;\n          this.selFlag = false;\n          this.map.setView(new LatLng(parseFloat(locObj.latitude), parseFloat(locObj.longitude)), 19);\n        } else {\n          return false;\n        }\n      }\n\n      if (this.searchtype == 'aps') {\n        this.selLocation = locObj.ap_name + \" Elv: \" + locObj.ap_elevation_ft + \" Azimuth: \" + locObj.azimuth + \"BW: \" + locObj.beamwidth;\n        this.selFlag = false;\n        this.map.setView(new LatLng(parseFloat(locObj.lat), parseFloat(locObj.lon)), 17);\n      }\n\n      if (this.searchtype == 'towers') {\n        this.selLocation = locObj.name;\n        this.selFlag = false;\n        this.map.setView(new LatLng(parseFloat(locObj.lat), parseFloat(locObj.lon)), 17);\n      }\n    }\n\n    newSearch() {\n      this.selFlag = false; //this.locations = null;\n    }\n\n    showhideLayer(toplayer, sublayer, showtf) {\n      this.basicLayers.forEach(function (l) {\n        if (l.name == toplayer) {\n          l.layers.forEach(function (sl) {\n            if (sl.name == sublayer) {\n              sl.show = showtf;\n            }\n          });\n        }\n      });\n    }\n\n    getSevicedLocations() {\n      var self = this;\n      this.apiService.getServicedLocations(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          const locs = response.locations;\n\n          if (locs.length > 0) {\n            this.showhideLayer('Locations', 'All Locations', true);\n            this.showhideLayer('Locations', 'Serviceable Locations', true);\n          }\n\n          self.serviceLocs = locs; //self.createLocationmapobj(locs);\n\n          if (self.map) {\n            self.createLocationmapobj('wireless');\n          }\n\n          return locs;\n        } else {\n          console.log(JSON.stringify(response.error));\n          alert(\"could not get serviceable locations\");\n        }\n      });\n    }\n\n    createcnHeatmapobj() {\n      const self = this;\n      console.log(\"creating cnheat map objects\");\n      const lm = [];\n      let cnarr = [];\n      var cnheatLayer = new LayerGroup();\n      this.cnheatData.forEach(function (cnobj) {\n        //console.log(\"creating marker from \"+ JSON.stringify(leadobj));\n        var spopup = \"\";\n        spopup += \"<b>Gid: </b>\" + cnobj.gid + \"</br>\";\n        spopup += \"<b>Max Down: </b>\" + cnobj.maxdown + \"</br>\";\n        spopup += \"<b>Max Up: </b>\" + cnobj.maxup + \"</br>\";\n        spopup += \"<b>Technology: </b>\" + cnobj.technology + \"</br>\";\n        spopup += \"<b>Bizrescode: </b>\" + cnobj.bizrescode + \"</br>\";\n        let qLayer;\n        const geojsonFeature = JSON.parse(cnobj.geojson);\n        const qgeo = geoJSON(geojsonFeature); // console.log('added json layer ' + datasetname);\n\n        cnarr.push(qgeo);\n      });\n      let qLayer;\n      qLayer = new LayerGroup(cnarr);\n      qLayer['name'] = 'cnHeat Polygons';\n      self.allOverlays['cnHeat Polygons'] = qLayer;\n      const foundlayer = false;\n\n      if (foundlayer === false) {\n        self.buildLayercontrol('chHeat');\n      } else {// self.checkLayerVisibility(fLayer);\n      }\n\n      return true;\n    }\n\n    getCnheatServiceTiles() {\n      const self = this;\n      let tilename = 'bdc_' + this.org_id + \"_cnheat\"; //tilename = 'bdc_fabric';\n\n      self.points_layers = [];\n      const tileurl = 'https://www.regulatorysolutions.us:7801/bdc_fabric.' + tilename; // get the json for the project\n\n      const tjson = 'https://www.regulatorysolutions.us:7800/bdcfabric.' + tilename + '.json'; //self.mapClickmode = 'street';\n\n      this.apiService.getTileJson(tilename).subscribe(resp => {\n        let geoType = '';\n        const tablecols = [];\n\n        if (resp.result === 'success') {\n          this.showhideLayer('cnHeat', 'cnHeat Polygons', true); // console.log('tile json ' + JSON.stringify(resp.json));\n\n          geoType = resp.json.geometrytype; // console.log('geoType ' + geoType);\n\n          const properties = resp.json.properties;\n          resp.json.properties['geoType'] = geoType;\n          properties.forEach(function (property) {\n            // // console.log('pushing ' + property.name);\n            tablecols.push(property.name);\n          });\n        }\n\n        console.log('building tile layer ' + tilename);\n        const renderer = canvas({\n          padding: 0.5\n        });\n        const vectorTileStyling = {};\n        const vectorTileColor = 'green';\n        let style = {};\n\n        if (geoType === 'Point') {\n          self.points_layers.push(tilename);\n\n          const vstyle = function (properties, zoom) {\n            let serviceable = properties.serviceable;\n\n            if (!serviceable) {\n              style = {\n                'radius': 5,\n                'fill': true,\n                'fillColor': 'blue',\n                'fillOpacity': 0.5,\n                'color': 'blue',\n                'opacity': 0.7,\n                'weight': 2\n              };\n            } else {\n              style = {\n                'radius': 5,\n                'fill': true,\n                'fillColor': vectorTileColor,\n                'fillOpacity': 0.5,\n                'color': vectorTileColor,\n                'opacity': 0.7,\n                'weight': 2\n              };\n            }\n\n            return style;\n          };\n\n          vectorTileStyling['bdc_fabric.' + tilename] = vstyle;\n        }\n\n        vectorTileStyling['bdc_fabric.' + tilename] = {\n          'radius': 5,\n          'fill': true,\n          'fillColor': '#ff0000',\n          'fillOpacity': 0.3,\n          'color': '#ff0000',\n          'opacity': 0.7,\n          'weight': 2\n        };\n\n        if (geoType !== 'Point' && geoType !== 'MultiLineString') {\n          vectorTileStyling['bdc_fabric.' + tilename] = {\n            'fill': true,\n            'fillColor': '#ff0000',\n            'fillOpacity': 0.3,\n            'color': '#ff0000',\n            'opacity': 0.7,\n            'weight': 1\n          };\n        }\n\n        if (geoType === 'MultiLineString') {\n          vectorTileStyling['bdc_fabric.' + tilename] = resp.style;\n        }\n\n        if (geoType === '') {\n          vectorTileStyling['bdc_fabric.' + tilename] = {\n            'fill': true,\n            'fillColor': vectorTileColor,\n            'fillOpacity': 0.1,\n            'color': vectorTileColor,\n            'opacity': 0.7,\n            'weight': 2,\n            'radius': 1\n          };\n        }\n\n        const vectorTileOptions = {\n          vectorTileLayerStyles: vectorTileStyling,\n          renderer: renderer,\n          zIndex: 999,\n          interactive: true // Make sure that this VectorGrid fires mouse/pointer events\n\n        };\n        const tlayer = vectorGrid.protobuf(tileurl + '/{z}/{x}/{y}.pbf', vectorTileOptions).on('click', function (e) {\n          //console.log('e ' , e);\n          let popup = '';\n          let pt;\n\n          if (e.target.layers) {\n            pt = e.target.layers.properties;\n          } else {\n            pt = e.layer.properties;\n          }\n\n          if (geoType == 'Point') {\n            popup += '<p><b>Location ID: ' + pt['location_id'] + '</br>' + 'Address: ' + pt['address_primary'] + '</br>';\n            const lat = Number(pt['latitude']);\n            const lon = Number(pt['longitude']);\n            const ltln = latLng(lat, lon);\n            const pup = new Popup().setLatLng(ltln);\n            pup.setContent(popup);\n            self.tilelayerPopup = pup;\n            e.sourceTarget.bindPopup(pup);\n            self.map.openPopup(self.tilelayerPopup);\n            tlayer['name'] = 'Locations'; //tilename;\n\n            self.points_tile_layers.push(tlayer);\n          }\n\n          if (geoType == 'MultiPolygon') {\n            console.log('pt ' + JSON.stringify(pt));\n            const pup = new Popup();\n            pup.setContent(\"cnHeat Layer\");\n            e.target.bindPopup(pup);\n            self.map.openPopup(self.tilelayerPopup);\n            tlayer['name'] = 'cnHeat Polygons';\n          }\n          /* L.popup()\r\n          .setContent(self.createPopupContent(e.target.name, e.layer.properties, tablecols))\r\n          .setLatLng(e.latlng)\r\n          .openOn(self.map) */\n\n        });\n        /*  .on('mouseover', function(e){\r\n           //console.log('e ' , e);\r\n           L.popup()\r\n           .setContent(\"<b>Location_ID: \" +e.layer.properties.location_id + \"</b>\")\r\n           .setLatLng(e.latlng)\r\n           .openOn(self.map)\r\n           \r\n         })\r\n         .on('mouseout', function(e){\r\n           //self.map.closePopup();\r\n           e.sourceTarget.closePopup();\r\n           e.target.closePopup();\r\n         }); */\n\n        /* self.allLayers.forEach(function(layer) {\r\n          if (layer.name === tilename) {\r\n            layer['columns'] = tablecols;\r\n          }\r\n        }); */\n\n        self.allOverlays['cnHeat Polygons'] = tlayer;\n        const foundlayer = false;\n\n        if (foundlayer === false) {\n          self.buildLayercontrol('chHeat');\n        } else {// self.checkLayerVisibility(fLayer);\n        }\n\n        return true;\n      });\n    }\n\n    getFiberSevicedLocations() {\n      var self = this;\n      this.apiService.getFiberServicedLocations(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          const locs = response.locations;\n\n          if (locs.length > 0) {\n            this.showhideLayer('Locations', 'Fiber Locations', true);\n          }\n\n          self.fiberserviceLocs = locs; //self.createLocationmapobj(locs);\n\n          if (self.map) {\n            self.createLocationmapobj('fiber');\n          }\n\n          return locs;\n        } else {\n          console.log(JSON.stringify(response.error)); //alert(\"could not get fiber serviceable locations\");\n        }\n      });\n    }\n\n    getCableSevicedLocations() {\n      var self = this;\n      this.apiService.getCableServicedLocations(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          const locs = response.locations;\n          self.cableserviceLocs = locs;\n\n          if (locs.length > 0) {\n            this.showhideLayer('Locations', 'Cable Locations', true);\n          } //self.createLocationmapobj(locs);\n\n\n          if (self.map) {\n            self.createLocationmapobj('cable');\n          }\n\n          return locs;\n        } else {\n          console.log(JSON.stringify(response.error)); //alert(\"could not get cable serviceable locations\");\n        }\n      });\n    }\n\n    getDslSevicedLocations() {\n      var self = this;\n      this.apiService.getDslServicedLocations(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          const locs = response.locations;\n          self.dslserviceLocs = locs;\n\n          if (locs.length > 0) {\n            this.showhideLayer('Locations', 'DSL Locations', true);\n          } //self.createLocationmapobj(locs);\n\n\n          if (self.map) {\n            self.createLocationmapobj('dsl');\n          }\n\n          return locs;\n        } else {\n          console.log(JSON.stringify(response.error)); //alert(\"could not get dsl serviceable locations\");\n        }\n      });\n    }\n\n    getCopperSevicedLocations() {\n      var self = this;\n      this.apiService.getDslServicedLocations(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          const locs = response.locations;\n          self.copperserviceLocs = locs;\n\n          if (locs.length > 0) {\n            this.showhideLayer('Locations', 'Copper Locations', true);\n          } //self.createLocationmapobj(locs);\n\n\n          if (self.map) {\n            self.createLocationmapobj('copper');\n          }\n\n          return locs;\n        } else {\n          console.log(JSON.stringify(response.error)); //alert(\"could not get dls serviceable locations\");\n        }\n      });\n    }\n\n    getcnheatSevicedLocations() {\n      var self = this;\n      this.apiService.getcnheatServicedLocations(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          const locs = response.locations;\n          self.cnheatserviceLocs = locs;\n\n          if (locs.length > 0) {\n            this.showhideLayer('Locations', 'cnHeat Locations', true);\n          }\n\n          self.getCnheatServiceTiles(); //self.getcnHeatraw()\n\n          if (self.map) {\n            self.createLocationmapobj('cnheat');\n          }\n\n          return locs;\n        } else {\n          console.log(JSON.stringify(response.error)); //alert(\"could not get cnheat serviceable locations\");\n        }\n      });\n    }\n\n    getcnHeatraw() {\n      const self = this;\n      this.apiService.getcnHeatraw(this.org_id).subscribe(response => {\n        if (response.result == 'success') {\n          self.cnheatData = response.data;\n          self.createcnHeatmapobj();\n        } else {\n          console.log(JSON.stringify(response.error));\n        }\n      });\n    }\n\n    getSites() {\n      const self = this;\n      this.apiService.getAdminSites(self.org_id).subscribe(response => {\n        //console.log(data);\n        if (response.result == 'success') {\n          var rsites = response.data;\n          self.siteData = [];\n          rsites.forEach(function (site) {\n            var md = site.metadata;\n\n            if (md.length > 0) {\n              md.forEach(function (d) {\n                if (d.field == 'state') {\n                  site[\"state\"] = d.value;\n                }\n\n                if (d.field == 'site_type') {\n                  site[\"site_type\"] = d.value;\n                }\n              });\n            }\n\n            self.siteData.push(site);\n          }); // var sites = this.createSitesmapobj();\n\n          if (self.map) {\n            console.log(\"map is here creating site objs\");\n            this.createSitesmapobj();\n          }\n\n          return self.siteData;\n        } else {\n          console.log(\"error getting sites\");\n        }\n      });\n    }\n\n    createLocationmapobj(type) {\n      const self = this;\n      let locationLayer = new LayerGroup();\n      let dataobjs;\n      let color = '#00ff00';\n\n      if (type == 'wireless') {\n        dataobjs = self.serviceLocs;\n      }\n\n      if (type == 'fiber') {\n        color = '#0000ff';\n        dataobjs = self.fiberserviceLocs;\n      }\n\n      if (type == 'cable') {\n        color = '#ff00ff';\n        dataobjs = self.cableserviceLocs;\n      }\n\n      if (type == 'dsl') {\n        color = '#aabbcc';\n        dataobjs = self.dslserviceLocs;\n      }\n\n      if (type == 'copper') {\n        color = '#c2c2c2';\n        dataobjs = self.dslserviceLocs;\n      }\n\n      if (type == 'cnheat') {\n        color = '#ff00ff';\n        dataobjs = self.cnheatserviceLocs;\n      }\n\n      let qMarkers = [];\n      dataobjs.forEach(function (dobj) {\n        // console.log('creating marker from '+ JSON.stringify(leadobj));\n        var popup = '';\n\n        if (dobj['location'] && dobj['location'] != '') {\n          popup += '<b>Location: ' + dobj['location'] + '</br>';\n        }\n\n        popup += '<b>Address: </b>' + dobj.address_primary + '</br>';\n        /* if (dobj['Site Address2'] && dobj['Site Address2'] != '') {\r\n          popup += dobj['Site Address2'] + '</br>';\r\n        } */\n\n        popup += dobj.city + ', ' + dobj.state + ' ' + dobj.zip + '</br>';\n\n        if (type == 'wireless') {\n          popup += '<b>Best AP: </b>' + dobj.best_ap + '<br>Distance: ' + dobj.distance + '</br>Bearing: ' + dobj.bearing;\n        } else {\n          popup += \"<b>Served By:</b> \" + type;\n        } //popup += '</br><a href=\"#\" (click)=\"self.showQualified('+dobj.location+')\">Show Results</a>';\n        //popup += '</br><span style=\"color: #00ff00\" id=\"showProfs\">Show Results</span>';\n\n\n        var lat = Number(dobj.latitude);\n        var lon = Number(dobj.longitude);\n        var marker;\n\n        if (!lat || !lon) {\n          // // console.log(JSON.stringify(dobj));\n          // console.log(dobj['Site Name'] + ' had no coords');s\n          var geojson = JSON.parse(dobj.geojson);\n          lat = geojson.coordinates[1];\n          lon = geojson.coordinates[0];\n        }\n\n        marker = circleMarker([lat, lon], {\n          fill: true,\n          fillColor: color,\n          radius: 3,\n          stroke: false,\n          fillOpacity: 0.70,\n          pane: 'locations'\n        });\n        marker[\"name\"] = dobj.location_id;\n        marker.on('click', function (e) {\n          if (type == 'wireless') {\n            self.showQualified(dobj, 'all');\n          }\n        }); //.bindPopup(popup)\n\n        qMarkers.push(marker);\n      });\n      var locationsLayer = new LayerGroup(qMarkers);\n\n      if (type == 'wireless') {\n        locationsLayer['name'] = \"Serviceable Locations\";\n        this.allOverlays[\"Serviceable Locations\"] = locationsLayer;\n      }\n\n      if (type == 'fiber') {\n        locationsLayer['name'] = \"Fiber Locations\";\n        this.allOverlays[\"Fiber Locations\"] = locationsLayer;\n      }\n\n      if (type == 'cable') {\n        locationsLayer['name'] = \"Cable Locations\";\n        this.allOverlays[\"Cable Locations\"] = locationsLayer;\n      }\n\n      if (type == 'dsl') {\n        locationsLayer['name'] = \"DSL Locations\";\n        this.allOverlays[\"DSL Locations\"] = locationsLayer;\n      }\n\n      if (type == 'copper') {\n        locationsLayer['name'] = \"Copper Locations\";\n        this.allOverlays[\"Copper Locations\"] = locationsLayer;\n      }\n\n      if (type == 'cnheat') {\n        locationsLayer['name'] = \"cnHeat Locations\";\n        this.allOverlays[\"cnHeat Locations\"] = locationsLayer;\n      } //locationsLayer.setZIndex(1000);\n      //this.allOverlays[\"Serviceable Locations\"] = locationsLayer;\n\n\n      this.buildLayercontrol(\"Locations\");\n      return true;\n    }\n\n    showLocationPopup() {}\n\n    createSitesmapobj() {\n      console.log(\"creating site map objects\"); //this.leadMarkers = [];\n\n      const lm = [];\n      const self = this;\n      let sitesarr = [];\n      let activeLayer = new LayerGroup();\n      /* var proposedLayer = new L.LayerGroup();\r\n      var inactiveLayer = new L.LayerGroup(); */\n\n      const towerIcon = icon({\n        iconUrl: 'https://app.regulatorysolutions.us/assets/images/tower.png',\n        iconSize: [23, 30],\n        iconAnchor: [11, 25]\n      });\n      const activeIcon = icon({\n        iconUrl: 'https://app.regulatorysolutions.us/assets/images/tower.png',\n        iconSize: [23, 30],\n        iconAnchor: [11, 25]\n      });\n      /*  var inactiveIcon = L.icon({iconUrl: '/assets/images/inactiveTower.png', iconSize: [23,30], iconAnchor: [25,25]});\r\n       var leadIcon = L.icon({iconUrl: '/assets/images/leadTower.png', iconSize: [23,30], iconAnchor: [25,25]}); */\n      //var activesiteLayer = new L.LayerGroup(this.activeSites);\n      //var inactivesiteLayer = new L.LayerGroup(this.inactiveSites);\n      //var proposedsiteLayer = new L.LayerGroup(this.proposedSites);\n\n      this.siteData.forEach(function (siteobj) {\n        //console.log(\"creating marker from \"+ JSON.stringify(leadobj));\n        let popup = \"\";\n        popup += \"<b>Name: </b>\" + siteobj.name + \"</br><b>Position: </b></br>\" + siteobj.lat + \", \" + siteobj.lon + \"</br>\";\n        popup += \"<b>Elevation: </b>\" + siteobj.max_elevation + \"</br>\";\n        popup += \"<b>Type: </b>\" + siteobj.site_type + \"</br>\"; //popup += \"<b>Status: </b>\" + siteobj.status;\n\n        const lat = Number(siteobj.lat);\n        const lon = Number(siteobj.lon); //var marker = L.marker([lat,lon]).bindPopup(popup);\n\n        const ltln = latLng(lat, lon);\n        const pup = new Popup({\n          closeButton: false,\n          closeOnEscapeKey: true\n        }).setLatLng(ltln);\n        pup.setContent(popup);\n        let sitemarker = marker(new LatLng(lat, lon), {\n          icon: towerIcon\n        }).bindPopup(pup); //if (!siteobj.status || siteobj.status == \"\"){\n        //sitemarker = marker([lat,lon]).bindPopup(popup);\n\n        self.activeSites.push(sitemarker);\n        sitesarr.push(sitemarker); // //siteobj.markerid = activesiteLayer.getLayerId(marker);\n        // }\n\n        /* if (siteobj.status == \"Active\"){\r\n          \r\n          marker = L.marker([lat,lon],{icon:activeIcon}).bindPopup(popup);\r\n          \r\n          self.activeSites.push(marker);\r\n         \r\n          //siteobj.markerid = activesiteLayer.getLayerId(marker);\r\n          //console.log(\"markerid \" + siteobj.markerid);\r\n          \r\n        }\r\n        if (siteobj.status == \"Inactive\"){\r\n          \r\n          marker = L.marker([lat,lon],{icon:inactiveIcon}).bindPopup(popup);\r\n         \r\n          self.inactiveSites.push(marker);\r\n          //siteobj.markerid = inactivesiteLayer.getLayerId(marker);\r\n          \r\n        }\r\n        if (siteobj.status == \"Proposed\"){\r\n          \r\n          marker = L.marker([lat,lon],{icon:leadIcon}).bindPopup(popup);\r\n         \r\n          self.proposedSites.push(marker);\r\n          //siteobj.markerid = proposedsiteLayer.getLayerId(marker);\r\n          \r\n        } */\n\n        siteobj.marker = sitemarker; //siteobj.markerid = marker._leaflet_id;\n        //self.layers.push(marker);\n        //console.log(siteobj.markerid, marker._latlng);\n      });\n      self.findCenter(this.siteData);\n      activeLayer = new LayerGroup(sitesarr);\n      activeLayer['name'] = \"Active Sites\";\n      self.allOverlays['Active Sites'] = activeLayer;\n      /* var inactivesiteLayer = new L.LayerGroup(this.inactiveSites);\r\n      inactivesiteLayer['name'] = \"Inactive Sites\";\r\n      this.allOverlays[\"Inactive Sites\"] = inactivesiteLayer;\r\n            var proposedsiteLayer = new L.LayerGroup(this.proposedSites);\r\n      proposedsiteLayer['name'] = \"Proposed Sites\";\r\n      this.allOverlays[\"Proposed Sites\"] = proposedsiteLayer; */\n\n      /* this.siteData.forEach(function(s){\r\n        var mkid = s.marker._leaflet_id;\r\n        s.markerid = mkid;\r\n        console.log(s.id, s.markerid);\r\n      }) */\n\n      self.buildLayercontrol(\"Sites\");\n      return true;\n    }\n\n    getRandomColor() {\n      var color = Math.floor(0x1000000 * Math.random()).toString(16);\n      return '#' + ('000000' + color).slice(-6);\n    }\n\n    getAPs() {\n      const self = this;\n      this.apiService.getAdminAps(self.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          var aps = result.data; // var aps = self.createAPsmapobj(); \n\n          self.apData = aps;\n          let freqs = [...new Set(self.apData.map(item => item.frequency_mhz))];\n          freqs.forEach(function (f) {\n            let fcolor = self.getRandomColor();\n            self.frequency_colors.push({\n              \"frequency\": f,\n              \"color\": fcolor\n            });\n          });\n          self.apData.forEach(function (apobj) {\n            let apfreq = apobj.frequency_mhz;\n            self.frequency_colors.forEach(function (fc) {\n              if (apfreq == fc.frequency) {\n                apobj[\"color\"] = fc.color;\n              }\n            });\n          });\n\n          if (self.map) {\n            console.log(\"map is here creating AP objs\");\n            this.createAPsmapobj();\n          }\n\n          return aps;\n        } else {\n          alert('Error fetching APs ' + result.errro);\n        }\n      });\n    }\n\n    createAPsmapobj() {\n      const self = this;\n      console.log(\"creating AP map objects\");\n      const lm = [];\n      let apsarr = [];\n      let radapsarr = [];\n      let activeapLayer = new LayerGroup();\n      /* var inactiveapLayer = new L.LayerGroup();\r\n      var proposedapLayer = new L.LayerGroup();*/\n\n      let activeFreqLayer = new LayerGroup(); //var proposedFreqLayer = new L.LayerGroup(); \n\n      this.apData.forEach(function (apobj) {\n        //console.log(\"creating marker from \"+ JSON.stringify(leadobj));\n        var spopup = \"\";\n        spopup += \"<b>Name: </b>\" + apobj.ap_name + \"</br><b>Position: </b></br>\" + apobj.lat + \", \" + apobj.lon + \"</br>\";\n        spopup += \"<b>Elevation: </b>\" + apobj.ap_elevation_ft + \"</br>\";\n        spopup += \"<b>Azimuth: </b>\" + apobj.azimuth + \"</br>\";\n        spopup += \"<b>Beamwidth: </b>\" + apobj.beamwidth + \"</br>\";\n        spopup += \"<b>Frequency: </b>\" + apobj.frequency_mhz + \"</br>\";\n        spopup += \"<b>Channel Width: </b>\" + apobj.channel_width_mhz + \"</br>\"; //spopup += \"<b>IP: </b>\" + apobj.ip_address;\n        //spopup += \"<b>Status: </b>\" + apobj.Status;\n\n        var lat = Number(apobj.lat);\n        var lon = Number(apobj.lon);\n        var shapellarr = self.apiService.sectorShapes(apobj, 1, null);\n        var shaperadarr = self.apiService.sectorShapes(apobj, 0, null);\n        apsarr.push(shapellarr);\n        radapsarr.push(shaperadarr);\n        var apcolor = apobj[\"color\"]; //'#00ff00';\n        //console.log(\"got back \" + JSON.stringify(shaperadarr));\n\n        var poly = polygon(shapellarr, {\n          color: apcolor,\n          fillColor: apcolor,\n          fill: true,\n          stroke: true,\n          opacity: 0.85\n        });\n        var radpoly = polygon(shaperadarr, {\n          color: apcolor,\n          fillColor: apcolor,\n          fill: true,\n          stroke: true,\n          opacity: 0.85\n        });\n        const ltln = latLng(lat, lon);\n        const pup = new Popup({\n          closeButton: false,\n          closeOnEscapeKey: true\n        }).setLatLng(ltln);\n        pup.setContent(spopup);\n        poly.bindPopup(pup);\n        radpoly.bindPopup(pup); //if(apobj.Status == 'Active'){\n\n        poly.addTo(activeapLayer);\n        radpoly.addTo(activeFreqLayer);\n        self.activeapShapes.push(poly);\n        self.activefreqRad.push(radpoly); //}\n\n        /*  if(apobj.Status == 'Inactive'){\r\n           poly.addTo(inactiveapLayer);\r\n           self.inactiveapShapes.push(poly);\r\n         }\r\n         if(apobj.Status == 'Proposed'){\r\n           poly.addTo(proposedapLayer);\r\n           radpoly.addTo(proposedFreqLayer);\r\n           self.proposedapShapes.push(poly);\r\n           self.proposedfreqRad.push(poly);\r\n         } */\n      });\n      console.log(radapsarr);\n      activeapLayer = new LayerGroup(this.activeapShapes);\n      activeFreqLayer = new LayerGroup(this.activefreqRad);\n      activeapLayer['name'] = \"Active APs\";\n      activeFreqLayer['name'] = \"AP Frequency\";\n      this.allOverlays[\"Active APs\"] = activeapLayer;\n      this.allOverlays[\"AP Frequency\"] = activeFreqLayer;\n      /* var inactiveapeLayer = new L.LayerGroup(this.inactiveapShapes);\r\n      inactiveapLayer['name'] = \"Inactive APs\";\r\n      this.allOverlays[\"Inactive APs\"] = inactiveapLayer;\r\n            var proposedapLayer = new L.LayerGroup(this.proposedapShapes);\r\n      var proposedRadLayer = new L.LayerGroup(this.proposedapRad);\r\n      proposedapLayer['name'] = \"Proposed APs\";\r\n      proposedFreqLayer['name'] = \"Basic Radius - Proposed\";\r\n      this.allOverlays[\"Proposed APs\"] = proposedapLayer;\r\n      this.allOverlays[\"Proposed - by rad\"] = proposedFreqLayer; */\n\n      this.buildLayercontrol(\"APs\"); //this.layersControl.overlays.APs = apLayer;\n\n      return true;\n    }\n\n    getFilerinfo() {\n      const self = this;\n      this.apiService.getAdminFilerInfo(this.org_id).subscribe(result => {\n        if (result.result == 'success') {\n          const filer = result.data;\n          self.filer = filer;\n\n          if (filer.filing_fixed_unlicensed_wireless || filer.filing_fixed_licensed_wireless) {\n            self.getNetworkBounds();\n          }\n\n          if (filer.filing_fiber) {\n            self.getAdminFiberBounds();\n          }\n\n          if (filer.filing_dsl_copper) {\n            self.getAdminDslBounds();\n          }\n\n          if (filer.filing_cable) {\n            self.getAdminCableBounds();\n          }\n        } else {\n          alert('Error fetching Network Bounds ' + result.errro);\n        }\n      });\n    }\n\n    getAdminFiberBounds() {\n      const self = this;\n      this.apiService.getAdminFiberBounds(this.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          const bData = result.data[0];\n          self.fiberboundsData = bData;\n          this.showhideLayer('Network Boundaries', 'Fiber Bounds', true);\n\n          if (self.map) {\n            console.log(\"map is here creating fiber bounds objs\");\n            self.buildBoundsLayers('fiber');\n          }\n        } else {\n          alert('Error fetching Fiber Bounds ' + result.errro);\n        }\n      });\n    }\n\n    getAdminCableBounds() {\n      const self = this;\n      this.apiService.getAdminCableBounds(this.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          const bData = result.data[0];\n          self.cableboundsData = bData;\n          this.showhideLayer('Network Boundaries', 'Cable Bounds', true);\n\n          if (self.map) {\n            console.log(\"map is here creating cable bounds objs\");\n            self.buildBoundsLayers('docsis');\n          }\n        } else {\n          alert('Error fetching Fiber Bounds ' + result.errro);\n        }\n      });\n    }\n\n    getAdminDslBounds() {\n      const self = this;\n      this.apiService.getAdminDslBounds(this.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          const bData = result.data[0];\n          self.dslboundsData = bData;\n          this.showhideLayer('Network Boundaries', 'DLS Bounds', true);\n\n          if (self.map) {\n            console.log(\"map is here creating DSL bounds objs\");\n            self.buildBoundsLayers('dsl');\n          }\n        } else {\n          alert('Error fetching Fiber Bounds ' + result.errro);\n        }\n      });\n      this.apiService.getAdminCopperBounds(this.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          const bData = result.data;\n          self.copperboundsData = bData[0];\n          this.showhideLayer('Network Boundaries', 'Copper Bounds', true);\n\n          if (self.map) {\n            console.log(\"map is here creating copper bounds objs\");\n            self.buildBoundsLayers('copper');\n          }\n        } else {\n          alert('Error fetching Fiber Bounds ' + result.errro);\n        }\n      });\n    }\n\n    getNetworkBounds() {\n      const self = this;\n      this.apiService.getAdminNetworkBounds(this.org_id).subscribe(result => {\n        //console.log(data);\n        if (result.result == 'success') {\n          const bData = result.data;\n          self.boundsData = bData;\n\n          if (self.map) {\n            console.log(\"map is here creating wireless bounds objs\");\n            this.showhideLayer('Network Boundaries', 'Wireless Bounds', true);\n            self.buildBoundsLayers('wireless');\n\n            if (self.filer.filing_fixed_licensed_wireless) {\n              this.showhideLayer('Network Boundaries', 'Licensed Bounds', true);\n              self.buildBoundsLayers('licensed');\n            }\n\n            if (self.filer.filing_fixed_unlicensed_wireless) {\n              this.showhideLayer('Network Boundaries', 'Unlicensed Bounds', true);\n              self.buildBoundsLayers('unlicensed');\n            }\n          }\n\n          return bData;\n        } else {\n          alert('Error fetching Network Bounds ' + result.errro);\n        }\n      });\n    }\n\n    buildBoundsLayers(ltype) {\n      const self = this;\n      const qShapes = [];\n      const netbndsarr = [];\n      const renderer = canvas({\n        padding: 0.5\n      });\n      let layerdata; //self.boundsData.forEach(function(layerdata){\n\n      let datasetname = '';\n\n      if (ltype == \"wireless\") {\n        datasetname = 'Wireless Bounds';\n        self.boundsData.forEach(function (wl) {\n          if (wl.name == 'wireless') {\n            layerdata = wl;\n          }\n        });\n      }\n\n      if (ltype == 'licensed') {\n        datasetname = 'Licensed Bounds';\n        self.boundsData.forEach(function (wl) {\n          if (wl.name == 'licensed') {\n            layerdata = wl;\n          }\n        });\n      }\n\n      if (ltype == 'unlicensed') {\n        datasetname = 'Unlicensed Bounds';\n        self.boundsData.forEach(function (wl) {\n          if (wl.name == 'unlicensed') {\n            layerdata = wl;\n          }\n        });\n      }\n\n      if (ltype == 'fiber') {\n        datasetname = 'Fiber Bounds';\n        layerdata = self.fiberboundsData;\n      }\n\n      if (ltype == 'docsis') {\n        datasetname = 'Docsis Bounds';\n        layerdata = self.cableboundsData;\n      }\n\n      if (ltype == 'dsl') {\n        datasetname = 'DSL Bounds';\n        layerdata = self.dslboundsData;\n      }\n\n      if (ltype == 'copper') {\n        datasetname = 'Copper Bounds';\n        layerdata = self.copperboundsData;\n      }\n\n      let qLayer;\n\n      if (!(layerdata === undefined)) {\n        const geojsonFeature = JSON.parse(layerdata.geojson);\n        const qgeo = geoJSON(geojsonFeature); // console.log('added json layer ' + datasetname);\n\n        qShapes.push(qgeo);\n        qLayer = new LayerGroup(qShapes);\n        qLayer['name'] = datasetname;\n        self.allOverlays[datasetname] = qLayer;\n      } //})\n      //self.buildLayercontrol('Network Boundaries');\n\n\n      self.buildLayercontrol('Network Boundaries');\n    }\n\n    buildTileLayer() {\n      const self = this;\n      let tilename = 'bdc_' + this.org_id; //tilename = 'bdc_fabric';\n\n      self.points_layers = [];\n      const tileurl = 'https://www.regulatorysolutions.us:7801/bdc_fabric.' + tilename; // get the json for the project\n\n      const tjson = 'https://www.regulatorysolutions.us:7800/bdcfabric.' + tilename + '.json';\n      self.mapClickmode = 'street';\n      this.apiService.getTileJson(tilename).subscribe(resp => {\n        let geoType = '';\n        const tablecols = [];\n\n        if (resp.result === 'success') {\n          this.showhideLayer('Locations', 'All Locations', true); // console.log('tile json ' + JSON.stringify(resp.json));\n\n          geoType = resp.json.geometrytype; // console.log('geoType ' + geoType);\n\n          const properties = resp.json.properties;\n          resp.json.properties['geoType'] = geoType;\n          properties.forEach(function (property) {\n            // // console.log('pushing ' + property.name);\n            tablecols.push(property.name);\n          });\n        }\n\n        console.log('building tile layer ' + tilename);\n        const renderer = canvas({\n          padding: 0.5\n        });\n        const vectorTileStyling = {};\n        const vectorTileColor = 'red';\n        let style = {};\n\n        if (geoType === 'Point') {\n          self.points_layers.push(tilename);\n\n          const vstyle = function (properties, zoom) {\n            let serviceable = properties.serviceable;\n\n            if (!serviceable) {\n              style = {\n                'radius': 3,\n                'fill': true,\n                'fillColor': 'blue',\n                'fillOpacity': 0.5,\n                'color': 'blue',\n                'opacity': 0.7,\n                'weight': 2\n              };\n            } else {\n              style = {\n                'radius': 3,\n                'fill': true,\n                'fillColor': vectorTileColor,\n                'fillOpacity': 0.5,\n                'color': vectorTileColor,\n                'opacity': 0.7,\n                'weight': 2\n              };\n            }\n\n            return style;\n          };\n\n          vectorTileStyling['bdc_fabric.' + tilename] = vstyle;\n        }\n\n        vectorTileStyling['bdc_fabric.' + tilename] = {\n          'radius': 3,\n          'fill': true,\n          'fillColor': vectorTileColor,\n          'fillOpacity': 0.5,\n          'color': vectorTileColor,\n          'opacity': 0.7,\n          'weight': 2\n        };\n\n        if (geoType !== 'Point' && geoType !== 'MultiLineString') {\n          vectorTileStyling['bdc_fabric.' + tilename] = {\n            'fill': true,\n            'fillColor': vectorTileColor,\n            'fillOpacity': 0.5,\n            'color': vectorTileColor,\n            'opacity': 0.7,\n            'weight': 2\n          };\n        }\n\n        if (geoType === 'MultiLineString') {\n          vectorTileStyling['bdc_fabric.' + tilename] = resp.style;\n        }\n\n        if (geoType === '') {\n          vectorTileStyling['bdc_fabric.' + tilename] = {\n            'fill': true,\n            'fillColor': vectorTileColor,\n            'fillOpacity': 0.1,\n            'color': vectorTileColor,\n            'opacity': 0.7,\n            'weight': 2,\n            'radius': 1\n          };\n        }\n\n        const vectorTileOptions = {\n          vectorTileLayerStyles: vectorTileStyling,\n          renderer: renderer,\n          zIndex: 1000,\n          interactive: true // Make sure that this VectorGrid fires mouse/pointer events\n\n        };\n        const tlayer = vectorGrid.protobuf(tileurl + '/{z}/{x}/{y}.pbf', vectorTileOptions).on('click', function (e) {\n          //console.log('e ' , e);\n          let popup = '';\n          let pt;\n\n          if (e.target.layers) {\n            pt = e.target.layers.properties;\n          } else {\n            pt = e.layer.properties;\n          }\n\n          popup += '<p><b>Location ID: ' + pt['location_id'] + '</br>' + 'Address: ' + pt['address_primary'] + '</br><br><span id=\"qualbtn\" style=\"color: blue\">Qualify</a>';\n          const lat = Number(pt['latitude']);\n          const lon = Number(pt['longitude']);\n          const ltln = new LatLng(lat, lon);\n          const pup = new Popup({\n            closeButton: false,\n            closeOnEscapeKey: true\n          }).setLatLng(ltln);\n          pup.setContent(popup);\n          self.tilelayerPopup = pup;\n          e.sourceTarget.bindPopup(pup);\n          self.map.openPopup(self.tilelayerPopup);\n          const qualbutton = DomUtil.get('qualbtn');\n          DomEvent.addListener(qualbutton, 'click', ee => {\n            console.log(\"clicked qualify\");\n            self.showQualified(pt, 'all');\n          });\n          /* L.popup()\r\n          .setContent(self.createPopupContent(e.target.name, e.layer.properties, tablecols))\r\n          .setLatLng(e.latlng)\r\n          .openOn(self.map) */\n        });\n        /*  .on('mouseover', function(e){\r\n           //console.log('e ' , e);\r\n           L.popup()\r\n           .setContent(\"<b>Location_ID: \" +e.layer.properties.location_id + \"</b>\")\r\n           .setLatLng(e.latlng)\r\n           .openOn(self.map)\r\n           \r\n         })\r\n         .on('mouseout', function(e){\r\n           //self.map.closePopup();\r\n           e.sourceTarget.closePopup();\r\n           e.target.closePopup();\r\n         }); */\n\n        tlayer['name'] = 'All Locations'; //tilename;\n\n        if (geoType === 'Point') {\n          self.points_tile_layers.push(tlayer);\n        }\n        /* self.allLayers.forEach(function(layer) {\r\n          if (layer.name === tilename) {\r\n            layer['columns'] = tablecols;\r\n          }\r\n        }); */\n\n\n        self.allOverlays['All Locations'] = tlayer;\n        const foundlayer = false;\n\n        if (foundlayer === false) {\n          self.buildLayercontrol('All Locations');\n        } else {// self.checkLayerVisibility(fLayer);\n        }\n\n        return true;\n      });\n    }\n\n    showQualified(dobj, type) {\n      const self = this;\n      self.removeQualobjs();\n      self.qualprofs = [];\n      const loc = dobj.location_id;\n      const loclat = dobj.latitude;\n      const loclon = dobj.longitude;\n      let qualAps;\n      self.locAps = this.apiService.findAPslocal(loclat, loclon, self.apData);\n      self.locAps.forEach(function (ap) {\n        ap.geom = '';\n      });\n      this.apiService.getPathprofiles(self.org_id, self.locAps, loclat, loclon, 23, 10).subscribe(response => {\n        if (response.result == 'success') {\n          var approfs = JSON.parse(response.profiles);\n          console.log('profiles' + approfs);\n          this.qualified = true;\n          this.chtdata = [];\n          var prfcnt = 0;\n          this.showGraphs = true;\n          this.graphsMin = false;\n          this.showQualfrm = false;\n          self.bestApId = null;\n          let tempqualprofs = []; //get the best AP\n\n          this.apiService.getLocationAps(self.org_id, loc).subscribe(response => {\n            if (response.result == 'success') {\n              let bestap;\n              self.bestAp = null;\n\n              if (response.aps.length > 0) {\n                bestap = response.aps[0];\n                self.bestAp = bestap;\n\n                if (bestap) {\n                  self.bestApId = bestap.id;\n                }\n              }\n\n              approfs.forEach(function (ap) {\n                console.log(JSON.stringify(ap));\n                var gdata = [];\n                var profarray = ap.profile;\n                var apname = ap.ap_name;\n                var freq = ap.frequency_mhz;\n                ap.distance = Number(ap.distance).toFixed(2);\n                ap.bearing = Number(ap.bearing).toFixed(2);\n                var apid = ap.id;\n                var title = \"Profile from \" + apname + \" (\" + freq + \" MHz) \\nDistance: \" + ap.distance + \"   Bearing: \" + ap.bearing + \" deg\";\n                var shortTitle = apname + \" (\" + freq + \" MHz) \" + ap.distance + \" \" + ap.bearing;\n                ap.title = title;\n                ap.shortTitle = shortTitle;\n                ap.showGraph = true;\n\n                if (ap.id == self.bestApId) {\n                  ap.color = '#00ff00';\n                }\n\n                console.log(ap.color);\n                let apTput = ap.throughputs;\n                console.log(\"ap Throughputs \" + JSON.stringify(apTput));\n                let aptputstr = 'Troughput Tiers<br>';\n                apTput.forEach(function (t) {\n                  aptputstr += t.download + \"/\" + t.upload + \" Mbps @ \" + t.min_rx_sig + \" dB<br>\";\n                });\n                ap[\"tputs\"] = aptputstr;\n                let gco = {\n                  colors: ['#8B4513', '#00ff00', '#0000ff', '#ff00ff', ap.color],\n                  crosshair: {\n                    trigger: 'both',\n                    orientation: 'vertical'\n                  },\n                  selectionMode: 'multiple',\n                  focusTarget: 'category',\n                  legend: {\n                    position: 'bottom'\n                  },\n                  vAxis: {\n                    title: 'Elevation'\n                  },\n                  hAxis: {\n                    title: 'Distance'\n                  },\n                  seriesType: 'line',\n                  series: {\n                    0: {\n                      type: 'area'\n                    },\n                    1: {\n                      type: 'area'\n                    }\n                  }\n                };\n                console.log(gco);\n                ap[\"gchtoptions\"] = gco;\n                console.log(ap.gchtoptions);\n                profarray.forEach(function (profpt) {\n                  gdata.push([profpt.distance, profpt.terrain, profpt.clutter, profpt.freznel, profpt.freznel_60, profpt.los]);\n                });\n                ap.gchtdata = gdata;\n                prfcnt++;\n\n                if (ap.id == self.bestApId) {\n                  self.bestAp = ap;\n                }\n\n                self.qualprofs.push(ap);\n              });\n              self.qualprofs.sort((a, b) => a.distance.localeCompare(b.distance));\n              const foundIdx = self.qualprofs.findIndex(el => el == self.bestAp);\n\n              if (foundIdx > -1) {\n                self.qualprofs.splice(foundIdx, 1);\n                self.qualprofs.unshift(self.bestAp);\n              }\n\n              console.log(JSON.stringify(self.qualprofs));\n              self.createAPqualobj(approfs, loc, loclat, loclon);\n            } else {\n              console.log(\"error getting best ap\");\n            }\n          });\n        } else {\n          console.log(JSON.stringify(response.error));\n          alert(\"could not get APs for location\");\n        }\n      });\n      /* if(type == 'serviced'){\r\n        self.bestApId = dobj.best_ap;\r\n      \r\n        this.apiService.getLocationAps(self.org_id,loc).subscribe((response: any) =>{\r\n          if(response.result == 'success'){\r\n            this.qualified = true;\r\n            this.chtdata = [];\r\n            var prfcnt =0;\r\n            this.showGraphs = true;\r\n            this.graphsMin = false;\r\n            this.showQualfrm = false;\r\n                  const aps = response.aps;\r\n            aps.forEach(function(ap){\r\n              console.log(JSON.stringify(ap));\r\n              var gdata:any = [];\r\n              var profarray = ap.profile;\r\n              var apname = ap.ap_name;\r\n              var freq = ap.frequency_mhz;\r\n              ap.distance = Number(ap.distance).toFixed(2);\r\n              ap.bearing = Number(ap.bearing).toFixed(2);\r\n              var apid = ap.id;\r\n              var title = \"Profile from \" + apname + \" (\" + freq + \" MHz) \\nDistance: \" + ap.distance + \"   Bearing: \" +  ap.bearing + \" deg\";\r\n              var shortTitle = apname + \" (\" + freq + \" MHz) \" + ap.distance + \" \" +  ap.bearing;\r\n              ap.title = title;\r\n              ap.shortTitle = shortTitle;\r\n              ap.showGraph = true;\r\n              profarray.forEach(function(profpt){\r\n                gdata.push([profpt.distance,profpt.terrain,profpt.clutter,profpt.freznel,profpt.freznel_60,profpt.los]);\r\n              })\r\n              prfcnt++;\r\n              ap.gchtdata = gdata;\r\n              self.qualprofs.push(ap);\r\n            })\r\n            self.createAPqualobj(aps,loc,loclat,loclon);\r\n          }else{\r\n            console.log(JSON.stringify(response.error));\r\n            alert(\"could not get APs for location\")\r\n          }\r\n              })\r\n      } */\n    }\n\n    getRndInteger(min, max) {\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    createAPqualobj(aps, loc, loclat, loclon) {\n      var self = this; //remove all layers\n\n      this.removeQualobjs();\n      this.qualShow = true;\n      aps.forEach(function (apobj) {\n        var lttbearing;\n\n        if (apobj.bearing < 0) {\n          var b = 360 - -apobj.bearing;\n          lttbearing = 360 - b;\n          apobj.bearing = b;\n        } else {\n          lttbearing = 360 - apobj.bearing;\n        } //console.log(\"creating marker from \"+ JSON.stringify(leadobj));\n\n\n        var spopup = \"<b>AP for Location ID \" + loc + \"</b></br>\";\n        spopup += \"<b>Name: </b>\" + apobj.ap_name + \"</br><b>Position: </b></br>\" + apobj.lat + \", \" + apobj.lon + \"</br>\";\n        spopup += \"<b>Elevation: </b>\" + apobj.ap_elevation_ft + \" ft</br>\";\n        spopup += \"<b>Distance (from AP): </b>\" + Number(apobj.distance).toFixed(2) + \" km</br>\";\n        spopup += \"<b>Bearing (from AP): </b>\" + Number(apobj.bearing).toFixed(2) + \"&#176;</br>\";\n        spopup += \"<b>Bearing (from Lead): </b>\" + lttbearing.toFixed(2) + \"&#176;</br>\";\n        spopup += \"<b>Azimuth: </b>\" + apobj.azimuth + \"&#176;</br>\";\n        spopup += \"<b>Beamwidth: </b>\" + apobj.beamwidth + \"&#176;</br>\";\n        spopup += \"<b>AP Ant Gain: </b>\" + apobj.ap_antenna_gain + \" dBi</br>\";\n        spopup += \"<b>Frequency: </b>\" + apobj.frequency_mhz + \" MHz</br>\";\n        spopup += \"<b>Channel Width: </b>\" + apobj.channel_width_mhz + \"</br>\";\n        spopup += \"<b>TX Pwr: </b>\" + apobj.tx_power_dbm + \" dBm</br>\";\n        spopup += \"<b>Noise Floor: </b>\" + apobj.avg_noise_floor_dbm + \" dBm</br>\";\n        spopup += \"<b>RX Elevation: </b> \" + apobj.cpe_elv + \" ft</br>\";\n        spopup += \"<b>RX Antenna Gain: </b> \" + apobj.cpe_gain + \" dBi </br>\";\n        spopup += \"<b>FSPL: </b>\" + apobj.fspl + \" dB</br>\";\n        spopup += \"<b>Line Losses: </b> 2 dB</br>\";\n        spopup += \"<b>Clutter Loss: </b>\" + apobj.clutterloss + \" dB </br>\";\n        spopup += \"<b>Total RX Signal: </b>\" + apobj.signal + \" dB</br>\";\n        spopup += \"<b>Min Install Signal: </b>\" + apobj.min_sig + \" dB</br>\";\n        spopup += \"<b>Max Speeds: </b>\" + apobj.max_down + \"/\" + apobj.max_up + \" Mbps</br>\";\n        spopup += apobj.tputs;\n        spopup += \"<b>Serviceable: </b>\" + apobj.served + \"</br>\";\n        var lat = Number(apobj.lat);\n        var lon = Number(apobj.lon);\n        let rnd = self.getRndInteger(1, 16777215);\n        console.log(\"rnd \" + rnd); // var fcolor = rnd.toString(16);\n        // fcolor = '#' + fcolor;\n\n        var fcolor = apobj.color;\n        var shaperadarr = self.apiService.sectorShapes(apobj, 0, null);\n        var radpoly;\n\n        if (apobj.id == self.bestApId) {\n          fcolor = '#00ff00';\n          self.bestAp = \"<b>Best </b>\" + spopup;\n          radpoly = polygon(shaperadarr, {\n            color: fcolor,\n            fillColor: fcolor,\n            fill: true,\n            stroke: true,\n            weight: 3,\n            fillOpacity: 0.70\n          });\n        } else {\n          radpoly = polygon(shaperadarr, {\n            color: fcolor,\n            fillColor: fcolor,\n            fill: true,\n            stroke: false,\n            opacity: 0.60\n          });\n        } //var radpoly = polygon(shaperadarr, {color:fcolor, fillColor: fcolor, fill: true, stroke:false,opacity: 0.85});\n        //radpoly.bindPopup(spopup);\n\n\n        self.qualifyObjs.push(radpoly);\n        var radlos = polyline([new LatLng(lat, lon), new LatLng(Number(loclat), Number(loclon))], {\n          color: fcolor,\n          weight: 3,\n          opacity: 1,\n          smoothFactor: 1,\n          pane: 'qualify'\n        });\n        const pup = new Popup({\n          closeButton: false,\n          closeOnEscapeKey: true\n        });\n        pup.setContent(spopup);\n        radlos.bindPopup(pup);\n        self.qualifyLos.push(radlos);\n      });\n      var qualapLayer = new LayerGroup(this.qualifyObjs);\n      qualapLayer['name'] = \"Qualify APs\";\n      qualapLayer.setZIndex(-1);\n      this.allOverlays[\"Qualify APs\"] = qualapLayer;\n      var qualloslayer = new LayerGroup(this.qualifyLos);\n      qualloslayer['name'] = \"Qualify Paths\";\n      qualloslayer.setZIndex(998);\n      this.allOverlays[\"Qualify Paths\"] = qualloslayer;\n      this.buildLayercontrol(\"Qualify\");\n      this.onResize(null);\n\n      if (this.showGraphs) {//this.qualifyLead();\n      }\n\n      return true;\n    }\n\n    cancelQualify() {\n      const self = this;\n      self.removeQualobjs();\n      self.qualprofs = [];\n      this.showGraphs = false;\n      this.graphsMin = false;\n      this.showQualfrm = false;\n      self.bestApId = null;\n    }\n\n    onResize(event) {\n      //event.target.innerWidth;\n      setTimeout(() => {\n        this.map.invalidateSize();\n      }, 0);\n    }\n\n    removeQualobjs() {\n      var self = this;\n\n      if (this.qualifyObjs && this.qualifyObjs.length > 0) {\n        this.qualifyObjs.forEach(function (qobj) {\n          if (self.allOverlays[\"Qualify APs\"].hasLayer(qobj)) {\n            self.allOverlays[\"Qualify APs\"].removeLayer(qobj);\n          }\n        });\n        this.qualifyLos.forEach(function (qobj) {\n          if (self.allOverlays[\"Qualify Paths\"].hasLayer(qobj)) {\n            self.allOverlays[\"Qualify Paths\"].removeLayer(qobj);\n          }\n        });\n      }\n\n      this.qualifyObjs = [];\n      this.qualifyLos = [];\n    }\n\n    toggleGraph(p) {\n      p.showGraph = !p.showGraph;\n    }\n\n    chartActivate(data, id) {\n      console.log('Activate', JSON.stringify(data));\n    }\n\n    selectProfile(p) {\n      this.profShow = true;\n      this.bigProfdata = p;\n    }\n\n    closeProfile() {\n      this.profShow = false;\n      this.bigProfdata = [];\n    }\n\n    hideGraphs() {\n      this.graphsMin = !this.graphsMin;\n    }\n\n    onError(e) {\n      console.log(e);\n    }\n\n    profileMousemove(e, p) {\n      // var cht = new google.visualization.LineChart(document.getElementById(p.ap_name));\n      console.log(\"in mousemove\");\n      console.log(e);\n\n      if (e.row) {\n        console.log(e);\n        var dist = p.gchtdata[e.row][0] * 1000; //in meters\n\n        var aplat = p.lat;\n        var aplon = p.lon;\n        var ang = p.bearing;\n        var vinc = Vincenty.destVincenty(aplat, aplon, ang, dist);\n        var pmarkerlatlon = new LatLng(vinc.lat, vinc.lon);\n        console.log(vinc.lat, vinc.lon);\n        var self = this;\n\n        if (self.profMouseObj) {\n          self.profMouseObj.forEach(function (pobj) {\n            if (self.allOverlays[\"Profile Marker\"].hasLayer(pobj)) {\n              self.allOverlays[\"Profile Marker\"].removeLayer(pobj);\n            }\n          });\n        }\n\n        self.profMouseObj = [];\n        var chmarker;\n        var losicon = icon({\n          iconUrl: '/assets/images/crosshair.png',\n          iconSize: [20, 20],\n          iconAnchor: [10, 10]\n        });\n        chmarker = marker(pmarkerlatlon, {\n          draggable: false,\n          icon: losicon,\n          zIndexOffset: 999\n        });\n        this.profMouseObj.push(chmarker);\n        var profObjMarker = new LayerGroup(this.profMouseObj);\n        profObjMarker['name'] = \"Profile Marker\";\n        this.allOverlays[\"Profile Marker\"] = profObjMarker;\n        console.log('adding crosshair to map');\n        this.allOverlays[\"Profile Marker\"].addTo(self.map); //console.log(\"has row and dist \" + dist)\n      }\n    }\n\n    layerChange(name, isSelected, section) {\n      var self = this; //const lcChecks = (this.form.controls.name as FormArray);\n\n      var lcArray = [];\n      lcArray = this.layerControl;\n\n      if (section == \"Tiles\") {\n        lcArray = this.tileLayers;\n        console.log(\"changing tile layer\");\n      }\n      /* if(section == \"Frequencies\"){\r\n        lcArray = this.frequencyLayers;\r\n      }\r\n      if(section == \"Viewsheds\"){\r\n        lcArray = this.viewShedlayers;\r\n      } */\n\n\n      if (section == \"Qualify\") {\n        lcArray = this.qualifyLayers;\n      }\n      /*\r\n      if(section == \"Search Results\"){\r\n        lcArray = this.searchLayers;\r\n      }\r\n      if(section == \"What If\"){\r\n        lcArray = this.whatifLayers;\r\n      } */\n\n\n      var foundlayer = false; //look through each object to see if they need to be turned off\n\n      lcArray.forEach(function (LClayer) {\n        var lcLayername = LClayer.name;\n\n        if (lcLayername == name) {\n          foundlayer = true; //turn off all sublayers if on else turn on sublayers marked as selected\n\n          var lcSublayers = LClayer.layers;\n\n          if (isSelected == true) {\n            LClayer.isSelected = true; //turn on all sublayers currently marked as on\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                var subselect = sublayer.isSelected;\n\n                if (subselect) {\n                  if (self.allOverlays[subname]) {\n                    self.allOverlays[subname].addTo(self.map);\n                  }\n                }\n              });\n            }\n          } else {\n            LClayer.isSelected = false; //turn off all sublayers, but leave their own object isSelected alone\n\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]); //if(subname == 'clutterTiles')\n                }\n              });\n            }\n\n            LClayer.isSelected = false;\n          }\n        } else {\n          //check all sublayers to see if name is one of those\n          var lcSublayers = LClayer.layers;\n          lcSublayers.forEach(function (sublayer) {\n            var subname = sublayer.name;\n\n            if (name == subname) {\n              foundlayer = true;\n\n              if (isSelected) {\n                if (self.allOverlays[subname]) {\n                  self.allOverlays[subname].addTo(self.map);\n\n                  if (subname == 'Clutter30') {\n                    self.showClutter30 = true;\n                  }\n\n                  if (subname == 'Clutter') {\n                    self.showClutter10 = true;\n                  }\n                }\n\n                sublayer.isSelected = true;\n              } else {\n                if (self.map.hasLayer(self.allOverlays[subname])) {\n                  self.map.removeLayer(self.allOverlays[subname]);\n\n                  if (subname == \"Clutter30\") {\n                    self.showClutter30 = false;\n                  }\n\n                  if (subname == \"Clutter\") {\n                    self.showClutter10 = false;\n                  }\n                }\n\n                sublayer.isSelected = false;\n              }\n            }\n          });\n        }\n      });\n      GlobalVars.layerControl = this.layerControl;\n    }\n\n    selectChange(name, isSelected, section) {\n      var self = this; //const lcChecks = (this.form.controls.name as FormArray);\n\n      var lcArray = [];\n      lcArray = this.layerControl;\n\n      if (section == \"Tiles\") {\n        lcArray = this.tileLayers;\n      }\n      /* if(section == \"Frequencies\"){\r\n        lcArray = this.frequencyLayers;\r\n      }\r\n      if(section == \"Viewsheds\"){\r\n        lcArray = this.viewShedlayers;\r\n      }\r\n      if(section == \"Qualify\"){\r\n        lcArray = this.qualifyLayers;\r\n      }\r\n      if(section == \"Search Results\"){\r\n        lcArray = this.searchLayers;\r\n      }\r\n      if(section == \"Search Results\"){\r\n        lcArray = this.whatifLayers;\r\n      } */\n\n\n      var foundlayer = false; //look through each object to see if they need to be turned off\n\n      lcArray.forEach(function (LClayer) {\n        var lcLayername = LClayer.name;\n\n        if (lcLayername == name) {\n          foundlayer = true; //if checked then mark all sublayers\n\n          var lcSublayers = LClayer.layers;\n\n          if (isSelected == true) {\n            //LClayer.isSelected = true;\n            //turn on all sublayers currently marked as on\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                sublayer.isSelected = true;\n              });\n            }\n\n            self.layerChange(name, LClayer.isSelected, section);\n          } else {\n            //LClayer.isSelected = false;\n            //turn off all sublayers, but leave their own object isSelected alone\n            if (lcSublayers.length > 0) {\n              lcSublayers.forEach(function (sublayer) {\n                var subname = sublayer.name;\n                sublayer.isSelected = false;\n              });\n            }\n\n            self.layerChange(name, false, section); //LClayer.isSelected = false;\n          }\n        }\n      });\n      GlobalVars.layerControl = this.layerControl;\n    }\n\n    toggleQualify() {\n      this.qualShow = !this.qualShow;\n    }\n\n    toggleNetwork() {\n      this.networkShow = !this.networkShow;\n    }\n\n    doMapstuff() {\n      const self = this;\n      this.getSites();\n      this.getAPs(); //this.getTiles();\n\n      this.getFilerinfo();\n      this.buildTileLayer();\n      this.getSevicedLocations();\n      this.getFiberSevicedLocations();\n      this.getCableSevicedLocations();\n      this.getDslSevicedLocations();\n      this.getcnheatSevicedLocations();\n      this.getCopperSevicedLocations();\n\n      if (this.activeSites.length > 1) {//this.findCenter(this.activeSites);\n      }\n      /*  if(self.apData){\r\n         self.createAPsmapobj();\r\n       }\r\n       if(self.siteData){\r\n         self.createSitesmapobj();\r\n         this.findCenter(self.siteData);\r\n       }\r\n       if(self.serviceLocs){\r\n         self.createLocationmapobj();\r\n       }\r\n       if(self.boundsData){\r\n         self.buildBoundsLayers();\r\n       } */\n\n    }\n\n  }\n\n  MapComponent.ɵfac = function MapComponent_Factory(t) {\n    return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  MapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapComponent,\n    selectors: [[\"app-map\"]],\n    decls: 184,\n    vars: 29,\n    consts: [[1, \"row\"], [1, \"col-12\", 2, \"border\", \"solid black 1px\", \"height\", \"100%\"], [1, \"small-map-container\"], [3, \"map$\", \"zoom$\", \"move$\", \"mapMove$\"], [2, \"position\", \"absolute\", \"top\", \"10px\", \"left\", \"40%\", \"width\", \"20%\", \"border\", \"solid 2px blue\", \"background-color\", \"aliceblue\", \"z-index\", \"998\", \"text-align\", \"center\"], [\"stype\", \"font-size: 16px;\"], [2, \"position\", \"absolute\", \"right\", \"10px\", \"top\", \"10px\", \"z-index\", \"998\", 3, \"hidden\"], [1, \"button\", 2, \"height\", \"50px\", \"width\", \"50px\", 3, \"click\"], [3, \"icon\"], [1, \"control-window\", 3, \"hidden\"], [2, \"width\", \"95%\", \"text-align\", \"right\", 3, \"click\"], [2, \"padding\", \"2px\", \"width\", \"95%\"], [1, \"map-control-heading\", 2, \"padding-left\", \"5px\", 3, \"click\"], [\"style\", \"float:right\", 4, \"ngIf\"], [\"style\", \"float: right\", 4, \"ngIf\"], [1, \"row\", 3, \"hidden\"], [1, \"form-check\", \"col-12\"], [4, \"ngFor\", \"ngForOf\"], [3, \"hidden\"], [2, \"position\", \"absolute\", \"top\", \"10px\", \"left\", \"50px\", \"z-index\", \"999\", \"background-color\", \"#dbdbdb\", \"font-size\", \"14px\", \"padding\", \"2px\", \"height\", \"auto\", \"width\", \"300px\", \"border-radius\", \"5px\", \"border\", \"1px solid black\", 3, \"hidden\", \"innerHtml\"], [2, \"position\", \"absolute\", \"bottom\", \"95px\", \"right\", \"1px\", \"z-index\", \"990\", \"background-color\", \"#dbdbdb\", \"font-size\", \"14px\", \"padding\", \"2px\", \"height\", \"auto\", \"width\", \"200px\", \"border-radius\", \"5px\", \"border\", \"1px solid black\", \"padding-left\", \"5px\", 3, \"hidden\"], [1, \"legsquare\", \"water\"], [1, \"legsquare\", \"evergreen\"], [1, \"legsquare\", \"deciduous\"], [1, \"legsquare\", \"mixed\"], [1, \"legsquare\", \"dwarf\"], [1, \"legsquare\", \"shrub\"], [1, \"legsquare\", \"grass\"], [1, \"legsquare\", \"sedge\"], [1, \"legsquare\", \"lichens\"], [1, \"legsquare\", \"moss\"], [1, \"legsquare\", \"pasture\"], [1, \"legsquare\", \"crops\"], [1, \"legsquare\", \"woodywet\"], [1, \"legsquare\", \"devopen\"], [1, \"legsquare\", \"devlow\"], [1, \"legsquare\", \"devmed\"], [1, \"legsquare\", \"devhigh\"], [1, \"legsquare\", \"snow\"], [2, \"position\", \"absolute\", \"bottom\", \"95px\", \"right\", \"1px\", \"z-index\", \"990\", \"background-color\", \"#dbdbdb\", \"font-size\", \"14px\", \"padding\", \"2px\", \"height\", \"auto\", \"width\", \"150px\", \"border-radius\", \"5px\", \"border\", \"1px solid black\", \"padding-left\", \"5px\", 3, \"hidden\"], [1, \"legsquare\", \"water10\"], [1, \"legsquare\", \"tree10\"], [1, \"legsquare\", \"shrub10\"], [1, \"legsquare\", \"grass10\"], [1, \"legsquare\", \"crop10\"], [1, \"legsquare\", \"builtup\"], [1, \"legsquare\", \"bare10\"], [1, \"legsquare\", \"snow10\"], [1, \"legsquare\", \"wet10\"], [1, \"legsquare\", \"mangroves\"], [1, \"legsquare\", \"moss10\"], [2, \"position\", \"absolute\", \"bottom\", \"1px\", \"left\", \"5px\", \"z-index\", \"999\", \"background-color\", \"#dbdbdb\", \"font-size\", \"14px\", \"padding\", \"2px\", \"height\", \"25px\", \"width\", \"150px\", \"border-radius\", \"5px\", \"text-align\", \"center\"], [2, \"position\", \"absolute\", \"top\", \"65px\", \"right\", \"1px\", \"height\", \"50px\", \"border\", \"solid 1px\", \"border-bottom-left-radius\", \"10px\", \"border-top-left-radius\", \"10px\", \"z-index\", \"994\", \"background-color\", \"#edf1f7\", \"text-align\", \"center\", \"padding-top\", \"12px\", 3, \"hidden\", \"click\"], [2, \"padding\", \"3px\"], [2, \"position\", \"absolute\", \"top\", \"160px\", \"right\", \"1px\", \"overflow-y\", \"auto\", \"z-index\", \"995\", \"max-height\", \"78.3vh\", \"min-height\", \"23vh\", 3, \"hidden\"], [2, \"width\", \"100%\", \"text-align\", \"left\", \"background-color\", \"#dbdbdb\"], [1, \"btn-primary\", 2, \"position\", \"relative\", \"left\", \"2px\", 3, \"click\"], [2, \"position\", \"absolute\", \"right\", \"18px\", 3, \"icon\", \"click\"], [1, \"graphwindow\"], [\"style\", \"border:solid 1px\", 4, \"ngFor\", \"ngForOf\"], [2, \"float\", \"right\"], [2, \"position\", \"relative\", \"float\", \"left\"], [1, \"legend-tool\"], [\"nbTooltip\", \"Show/Hide\", 3, \"click\", 4, \"ngIf\"], [\"style\", \"width: 100%; padding-left:3px\", 4, \"ngFor\", \"ngForOf\"], [\"nbTooltip\", \"Show/Hide\", 3, \"click\"], [2, \"width\", \"100%\", \"padding-left\", \"3px\"], [2, \"border\", \"solid 1px\"], [1, \"graph-heading\", 2, \"padding-left\", \"5px\"], [4, \"ngIf\"], [\"style\", \"float:right;z-index:999;\", 4, \"ngIf\"], [\"style\", \"float: right;z-index:999;\", 4, \"ngIf\"], [2, \"height\", \"auto\", \"border\", \"solid 1px\", 3, \"hidden\"], [\"id\", \"p.ap_name\", 3, \"title\", \"type\", \"data\", \"columns\", \"options\", \"error\", \"mouseover\"], [2, \"float\", \"right\", \"z-index\", \"999\"]],\n    template: function MapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"ngx-base-map\", 3);\n        i0.ɵɵlistener(\"map$\", function MapComponent_Template_ngx_base_map_map__3_listener($event) {\n          return ctx.receiveMap($event);\n        })(\"zoom$\", function MapComponent_Template_ngx_base_map_zoom__3_listener($event) {\n          return ctx.receiveZoom($event);\n        })(\"move$\", function MapComponent_Template_ngx_base_map_move__3_listener($event) {\n          return ctx.receiveMove($event);\n        })(\"mapMove$\", function MapComponent_Template_ngx_base_map_mapMove__3_listener($event) {\n          return ctx.receiveMapMove($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"span\", 5);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_8_listener() {\n          return ctx.showLayercontrol();\n        });\n        i0.ɵɵelement(9, \"fa-icon\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 10);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_div_click_11_listener() {\n          return ctx.hideLayercontrol();\n        });\n        i0.ɵɵelement(12, \"fa-icon\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 11)(14, \"form\")(15, \"div\")(16, \"div\")(17, \"p\", 12);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_p_click_17_listener() {\n          return ctx.toggleTile();\n        });\n        i0.ɵɵelementStart(18, \"b\");\n        i0.ɵɵtext(19, \"Tile Layers\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(20, MapComponent_span_20_Template, 2, 1, \"span\", 13);\n        i0.ɵɵtemplate(21, MapComponent_span_21_Template, 2, 1, \"span\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"div\", 15)(23, \"div\", 16);\n        i0.ɵɵtemplate(24, MapComponent_div_24_Template, 9, 4, \"div\", 17);\n        i0.ɵɵelement(25, \"br\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(26, \"div\", 18)(27, \"div\")(28, \"p\", 12);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_p_click_28_listener() {\n          return ctx.toggleQualify();\n        });\n        i0.ɵɵelementStart(29, \"b\");\n        i0.ɵɵtext(30, \"Qualification\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(31, MapComponent_span_31_Template, 2, 1, \"span\", 13);\n        i0.ɵɵtemplate(32, MapComponent_span_32_Template, 2, 1, \"span\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(33, \"div\", 18)(34, \"div\", 16);\n        i0.ɵɵtemplate(35, MapComponent_div_35_Template, 9, 4, \"div\", 17);\n        i0.ɵɵelement(36, \"br\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(37, \"div\")(38, \"p\", 12);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_p_click_38_listener() {\n          return ctx.toggleNetwork();\n        });\n        i0.ɵɵelementStart(39, \"b\");\n        i0.ɵɵtext(40, \"Network\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(41, MapComponent_span_41_Template, 2, 1, \"span\", 13);\n        i0.ɵɵtemplate(42, MapComponent_span_42_Template, 2, 1, \"span\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(43, \"div\", 18)(44, \"div\", 16);\n        i0.ɵɵtemplate(45, MapComponent_div_45_Template, 10, 4, \"div\", 17);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelement(46, \"div\", 19);\n        i0.ɵɵelementStart(47, \"div\", 20)(48, \"p\");\n        i0.ɵɵtext(49, \"Clutter Legend (30m)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(50, \"br\");\n        i0.ɵɵelementStart(51, \"div\");\n        i0.ɵɵelement(52, \"div\", 21);\n        i0.ɵɵtext(53, \" Water\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(54, \"br\");\n        i0.ɵɵelementStart(55, \"div\");\n        i0.ɵɵelement(56, \"div\", 22);\n        i0.ɵɵtext(57, \" Evergreen\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(58, \"br\");\n        i0.ɵɵelementStart(59, \"div\");\n        i0.ɵɵelement(60, \"div\", 23);\n        i0.ɵɵtext(61, \" Deciduous\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(62, \"br\");\n        i0.ɵɵelementStart(63, \"div\");\n        i0.ɵɵelement(64, \"div\", 24);\n        i0.ɵɵtext(65, \" Mixed Forrest\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(66, \"br\");\n        i0.ɵɵelementStart(67, \"div\");\n        i0.ɵɵelement(68, \"div\", 25);\n        i0.ɵɵtext(69, \" Dwarf Scrub\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(70, \"br\");\n        i0.ɵɵelementStart(71, \"div\");\n        i0.ɵɵelement(72, \"div\", 26);\n        i0.ɵɵtext(73, \" Shrub/Scrub\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(74, \"br\");\n        i0.ɵɵelementStart(75, \"div\");\n        i0.ɵɵelement(76, \"div\", 27);\n        i0.ɵɵtext(77, \" Grasslands\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(78, \"br\");\n        i0.ɵɵelementStart(79, \"div\");\n        i0.ɵɵelement(80, \"div\", 28);\n        i0.ɵɵtext(81, \" Sedge/Herbacous\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(82, \"br\");\n        i0.ɵɵelementStart(83, \"div\");\n        i0.ɵɵelement(84, \"div\", 29);\n        i0.ɵɵtext(85, \" Lichens\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(86, \"br\");\n        i0.ɵɵelementStart(87, \"div\");\n        i0.ɵɵelement(88, \"div\", 30);\n        i0.ɵɵtext(89, \" moss\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(90, \"br\");\n        i0.ɵɵelementStart(91, \"div\");\n        i0.ɵɵelement(92, \"div\", 31);\n        i0.ɵɵtext(93, \" Pasture\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(94, \"br\");\n        i0.ɵɵelementStart(95, \"div\");\n        i0.ɵɵelement(96, \"div\", 32);\n        i0.ɵɵtext(97, \" Crops\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(98, \"br\");\n        i0.ɵɵelementStart(99, \"div\");\n        i0.ɵɵelement(100, \"div\", 33);\n        i0.ɵɵtext(101, \" Woody Wetlands\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(102, \"br\");\n        i0.ɵɵelementStart(103, \"div\");\n        i0.ɵɵelement(104, \"div\", 34);\n        i0.ɵɵtext(105, \" Developed - Open\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(106, \"br\");\n        i0.ɵɵelementStart(107, \"div\");\n        i0.ɵɵelement(108, \"div\", 35);\n        i0.ɵɵtext(109, \" Developed - low\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(110, \"br\");\n        i0.ɵɵelementStart(111, \"div\");\n        i0.ɵɵelement(112, \"div\", 36);\n        i0.ɵɵtext(113, \" Developed - med\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(114, \"br\");\n        i0.ɵɵelementStart(115, \"div\");\n        i0.ɵɵelement(116, \"div\", 37);\n        i0.ɵɵtext(117, \" Developed - high\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(118, \"br\");\n        i0.ɵɵelementStart(119, \"div\");\n        i0.ɵɵelement(120, \"div\", 38);\n        i0.ɵɵtext(121, \" Snow/Ice\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(122, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(123, \"div\", 39)(124, \"p\");\n        i0.ɵɵtext(125, \"Clutter Legend (10m)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(126, \"br\");\n        i0.ɵɵelementStart(127, \"div\");\n        i0.ɵɵelement(128, \"div\", 40);\n        i0.ɵɵtext(129, \"Water\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(130, \"br\");\n        i0.ɵɵelementStart(131, \"div\");\n        i0.ɵɵelement(132, \"div\", 41);\n        i0.ɵɵtext(133, \"Trees\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(134, \"br\");\n        i0.ɵɵelementStart(135, \"div\");\n        i0.ɵɵelement(136, \"div\", 42);\n        i0.ɵɵtext(137, \"Shrubland\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(138, \"br\");\n        i0.ɵɵelementStart(139, \"div\");\n        i0.ɵɵelement(140, \"div\", 43);\n        i0.ɵɵtext(141, \"Grassland\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(142, \"br\");\n        i0.ɵɵelementStart(143, \"div\");\n        i0.ɵɵelement(144, \"div\", 44);\n        i0.ɵɵtext(145, \"Crops\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(146, \"br\");\n        i0.ɵɵelementStart(147, \"div\");\n        i0.ɵɵelement(148, \"div\", 45);\n        i0.ɵɵtext(149, \"Built-up\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(150, \"br\");\n        i0.ɵɵelementStart(151, \"div\");\n        i0.ɵɵelement(152, \"div\", 46);\n        i0.ɵɵtext(153, \"Bare\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(154, \"br\");\n        i0.ɵɵelementStart(155, \"div\");\n        i0.ɵɵelement(156, \"div\", 47);\n        i0.ɵɵtext(157, \"Snow/Ice\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(158, \"br\");\n        i0.ɵɵelementStart(159, \"div\");\n        i0.ɵɵelement(160, \"div\", 48);\n        i0.ɵɵtext(161, \"Herbaceous Wetlands\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(162, \"br\");\n        i0.ɵɵelementStart(163, \"div\");\n        i0.ɵɵelement(164, \"div\", 49);\n        i0.ɵɵtext(165, \"Mangroves\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(166, \"br\");\n        i0.ɵɵelementStart(167, \"div\");\n        i0.ɵɵelement(168, \"div\", 50);\n        i0.ɵɵtext(169, \"Moss and Lichens\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(170, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(171, \"div\", 51)(172, \"p\");\n        i0.ɵɵtext(173);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(174, \"div\", 52);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_div_click_174_listener() {\n          return ctx.hideGraphs();\n        });\n        i0.ɵɵelementStart(175, \"span\", 53);\n        i0.ɵɵtext(176, \"Profiles\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(177, \"div\", 54)(178, \"div\", 55)(179, \"button\", 56);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_179_listener() {\n          return ctx.cancelQualify();\n        });\n        i0.ɵɵtext(180, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(181, \"fa-icon\", 57);\n        i0.ɵɵlistener(\"click\", function MapComponent_Template_fa_icon_click_181_listener() {\n          return ctx.hideGraphs();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(182, \"div\", 58);\n        i0.ɵɵtemplate(183, MapComponent_div_183_Template, 7, 9, \"div\", 59);\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate2(\"\", ctx.org_id, \" - \", ctx.company, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.layerControlvisible);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.layergroup);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.layerControlvisible);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"icon\", ctx.arrowRight);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tileShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.tileShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.tileShow);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tileLayers);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", !ctx.showGraphs);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", !ctx.qualShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.qualShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.qualShow);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.qualifyLayers);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", !ctx.networkShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.networkShow);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.networkShow);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.layerControl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.showGraphs)(\"innerHtml\", ctx.bestAp, i0.ɵɵsanitizeHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.showClutter30);\n        i0.ɵɵadvance(76);\n        i0.ɵɵproperty(\"hidden\", !ctx.showClutter10);\n        i0.ɵɵadvance(50);\n        i0.ɵɵtextInterpolate2(\"\", ctx.currentLat, \",\", ctx.currentLon, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.graphsMin);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"hidden\", !ctx.showGraphs || ctx.graphsMin);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"icon\", ctx.arrowRight);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.qualprofs);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.GoogleChartComponent, i5.FaIconComponent, i6.BaseMapComponent],\n    styles: [\".leaflet-top,   .leaflet-bottom {\\n  z-index: 997;\\n}\\n\\n  .leaflet-control-zoom {\\n  border: none;\\n}\\n\\n  .leaflet-control-zoom a {\\n  text-decoration: none !important;\\n}\\n\\n  .leaflet-container {\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.small-map-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  top: 0px;\\n  left: 0px;\\n}\\n\\n.map[_ngcontent-%COMP%] {\\n  height: 100%;\\n  width: 100%;\\n  min-height: 100%;\\n}\\n\\n.coords[_ngcontent-%COMP%] {\\n  height: 35px;\\n  width: 200px;\\n  position: relative;\\n  left: 10px;\\n  bottom: 27px;\\n}\\n\\n.legend-tool[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: flex-end;\\n  z-index: 999;\\n}\\n\\n.mapcontrols[_ngcontent-%COMP%] {\\n  border: solid 2px;\\n  background-color: #edf1f7;\\n  min-height: 800px;\\n  height: 100%;\\n  display: flex;\\n  flex: 1;\\n  padding: 1rem 1.25rem;\\n}\\n\\n.profile[_ngcontent-%COMP%] {\\n  width: 30%;\\n  height: 100%;\\n}\\n\\n.map-control-heading[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border: solid 1px;\\n  background-color: #bbbbbb;\\n  border-radius: 5px;\\n  font-size: 12px;\\n}\\n\\n.map-project-heading[_ngcontent-%COMP%] {\\n  width: 100%;\\n  font-size: 12px;\\n  font-weight: bold;\\n}\\n\\n.control-window[_ngcontent-%COMP%] {\\n  overflow-y: auto;\\n  border: solid 1px;\\n  position: absolute;\\n  right: 10px;\\n  top: 10px;\\n  z-index: 997;\\n  width: 300px;\\n  display: block;\\n  height: auto;\\n  border-radius: 10px;\\n  padding: 15px;\\n  background-color: #dbdbdb;\\n}\\n\\n.theme-window[_ngcontent-%COMP%] {\\n  height: 90%;\\n}\\n\\n.info-window[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  flex-grow: 1;\\n  position: absolute;\\n  right: 36px;\\n  top: 110px;\\n  z-index: 900;\\n  width: 100%;\\n  height: 85%;\\n  padding-left: 5px;\\n  background-color: #dbdbdb;\\n  overflow: hidden;\\n}\\n\\n.sub-control-window[_ngcontent-%COMP%] {\\n  position: relative;\\n  width: 100%;\\n  margin-top: 5px;\\n  overflow-y: scroll;\\n  height: 60%;\\n}\\n\\n.leadwindow[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  border-radius: 20px;\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n  padding-left: 10px;\\n  padding-right: 10px;\\n  margin-right: 3px;\\n}\\n\\n.graphwindow[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  min-height: 20vh;\\n  overflow-y: scroll;\\n}\\n\\n.profilewindow[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  max-height: 35vh;\\n  height: 25vh;\\n  width: 100%;\\n}\\n\\n.profilewindowtest[_ngcontent-%COMP%] {\\n  z-index: 999;\\n  border: 1px solid;\\n  border-radius: 20px;\\n  width: 100%;\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n  padding-right: 10px;\\n  padding-left: 10px;\\n  margin-right: 3px;\\n}\\n\\n.graph-heading[_ngcontent-%COMP%] {\\n  width: 100%;\\n  border: solid 1px;\\n  background-color: #7f7f7f;\\n}\\n\\n.lcUl[_ngcontent-%COMP%] {\\n  list-style-type: none;\\n  margin: 0;\\n  padding: 0;\\n  font-size: 12px;\\n  width: 100%;\\n}\\n\\n.lcLi[_ngcontent-%COMP%] {\\n  list-style-type: none;\\n  margin: 5px;\\n  padding: 0;\\n  font-size: 12px;\\n  width: 100%;\\n}\\n\\n[hidden][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.legsquare[_ngcontent-%COMP%] {\\n  float: left;\\n  height: 15px;\\n  width: 15px;\\n  margin-bottom: 5px;\\n  border: 1px solid black;\\n  clear: both;\\n}\\n\\n.water[_ngcontent-%COMP%] {\\n  background-color: #486DA2;\\n}\\n\\n.evergreen[_ngcontent-%COMP%] {\\n  background-color: #1d6533;\\n}\\n\\n.deciduous[_ngcontent-%COMP%] {\\n  background-color: #85C77E;\\n}\\n\\n.mixed[_ngcontent-%COMP%] {\\n  background-color: #D4E7B0;\\n}\\n\\n.barren[_ngcontent-%COMP%] {\\n  background-color: #D2CDC0;\\n}\\n\\n.dwarf[_ngcontent-%COMP%] {\\n  background-color: #AF963C;\\n}\\n\\n.shrub[_ngcontent-%COMP%] {\\n  background-color: #DCCA8F;\\n}\\n\\n.grass[_ngcontent-%COMP%] {\\n  background-color: #FDE9AA;\\n}\\n\\n.sedge[_ngcontent-%COMP%] {\\n  background-color: #D1D182;\\n}\\n\\n.lichens[_ngcontent-%COMP%] {\\n  background-color: #A3CC51;\\n}\\n\\n.moss[_ngcontent-%COMP%] {\\n  background-color: #82BA9E;\\n}\\n\\n.pasture[_ngcontent-%COMP%] {\\n  background-color: #FBF65D;\\n}\\n\\n.crops[_ngcontent-%COMP%] {\\n  background-color: #CA9146;\\n}\\n\\n.woodywet[_ngcontent-%COMP%] {\\n  background-color: #C8E6F8;\\n}\\n\\n.wet[_ngcontent-%COMP%] {\\n  background-color: #64B3D5;\\n}\\n\\n.devopen[_ngcontent-%COMP%] {\\n  background-color: #E8D1D1;\\n}\\n\\n.devlow[_ngcontent-%COMP%] {\\n  background-color: #E29E8C;\\n}\\n\\n.devmed[_ngcontent-%COMP%] {\\n  background-color: #FF0000;\\n}\\n\\n.devhigh[_ngcontent-%COMP%] {\\n  background-color: #B50000;\\n}\\n\\n.snow[_ngcontent-%COMP%] {\\n  background-color: #FFFFFF;\\n}\\n\\n.tree10[_ngcontent-%COMP%] {\\n  background-color: #76A772;\\n}\\n\\n.shrub10[_ngcontent-%COMP%] {\\n  background-color: #F6F598;\\n}\\n\\n.grass10[_ngcontent-%COMP%] {\\n  background-color: #E7F88E;\\n}\\n\\n.crop10[_ngcontent-%COMP%] {\\n  background-color: #EEC0F2;\\n}\\n\\n.builtup[_ngcontent-%COMP%] {\\n  background-color: #F37572;\\n}\\n\\n.bare10[_ngcontent-%COMP%] {\\n  background-color: #B4B4B4;\\n}\\n\\n.snow10[_ngcontent-%COMP%] {\\n  background-color: #F0F0F0;\\n}\\n\\n.water10[_ngcontent-%COMP%] {\\n  background-color: #0064C8;\\n}\\n\\n.wet10[_ngcontent-%COMP%] {\\n  background-color: #0096A0;\\n}\\n\\n.mangroves[_ngcontent-%COMP%] {\\n  background-color: #5D9C58;\\n}\\n\\n.moss10[_ngcontent-%COMP%] {\\n  background-color: #F6D283;\\n}\"]\n  });\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}