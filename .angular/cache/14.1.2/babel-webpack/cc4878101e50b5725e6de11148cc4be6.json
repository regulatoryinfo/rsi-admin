{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as Vincenty from 'node-vincenty';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.url = 'https://www.regulatorysolutions.us';\n    }\n\n    getAdminreport(period_end) {\n      return this.httpClient.get(`${this.url}/export/getAdminreport/` + period_end);\n    }\n\n    prepareBdcfiling(org, period_end) {\n      return this.httpClient.get(`${this.url}/admin/prepBdcfiling/` + org + '/' + period_end);\n    }\n\n    checkDuplicates(org, period_end) {\n      return this.httpClient.get(`${this.url}/admin/checkTracts/` + org + '/' + period_end);\n    }\n\n    getAdminSites(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminSites/` + org_id);\n    }\n\n    getAdminAps(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminAps/` + org_id);\n    }\n\n    getAdminNetworkBounds(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminNetworkBounds/` + org_id);\n    }\n\n    getAdminFiberBounds(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminFiberBounds/` + org_id);\n    }\n\n    getAdminCableBounds(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminCableBounds/` + org_id);\n    }\n\n    getAdminDslBounds(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminDslBounds/` + org_id);\n    }\n\n    getAdminCopperBounds(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminCopperBounds/` + org_id);\n    }\n\n    getPathprofiles(org_id, aps, lat, lon, elv, resolution) {\n      return this.httpClient.post(`${this.url}/admin/getPathprofilesnew/` + org_id + `/` + lat + `/` + lon + `/` + elv + `/` + resolution, aps);\n    }\n\n    getAdminFilerInfo(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getAdminFilerInfo/` + org_id);\n    }\n\n    getTileJson(tilename) {\n      return this.httpClient.get(`${this.url}/admin/getTileJson/` + tilename);\n    }\n\n    getServicedLocations(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getServicedLocations/` + org_id);\n    }\n\n    getFiberServicedLocations(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getFiberServicedLocations/` + org_id);\n    }\n\n    getCableServicedLocations(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getCableServicedLocations/` + org_id);\n    }\n\n    getDslServicedLocations(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getDslServicedLocations/` + org_id);\n    }\n\n    getCopperServicedLocations(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getCopperServicedLocations/` + org_id);\n    }\n\n    getcnheatServicedLocations(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getcnheatServicedLocations/` + org_id);\n    }\n\n    getLocationAps(org_id, loc) {\n      return this.httpClient.get(`${this.url}/admin/getLocationAps/` + org_id + '/' + loc);\n    }\n\n    getcnHeatraw(org_id) {\n      return this.httpClient.get(`${this.url}/admin/getcnHeatobs/` + org_id);\n    }\n\n    getVincenty(lat1, lon1, lat2, lon2) {\n      var vinc = Vincenty.distVincenty(lat1, lon1, lat2, lon2);\n      return vinc;\n    } //finds angle between two other lines\n\n\n    angleBetween(n, a, b) {\n      n = (360 + n % 360) % 360;\n      a = (3600000 + a) % 360;\n      b = (3600000 + b) % 360;\n      if (a < b) return a <= n && n <= b;\n      return a <= n || n <= b;\n    } //get aps within range\n\n\n    findAPslocal(lat, lon, apobj) {\n      var apdistance = new Array();\n      var incov = false;\n      var insectcnt = 0;\n      var aps = new Array();\n      var sc = 0;\n\n      for (var i in apobj) {\n        //alert(apobj[i].coords);\n        var sectcolor = \"#00FF00\";\n        incov = false;\n        var aplat = parseFloat(apobj[i].Lat);\n        var aplon = parseFloat(apobj[i].Lon); //var ept = new OpenLayers.Geometry.Point(latlng.lon, latlng.lat).transform(proj_2, proj_1);\n\n        var distvinc = Vincenty.distVincenty(aplat, aplon, parseFloat(lat), parseFloat(lon));\n        apdistance[i] = distvinc.distance / 1000;\n        console.log(apobj[i].Name + \", \" + Number(apobj[i].Radius) * 1.609344 + \", \" + apdistance[i]);\n\n        if (apdistance[i] <= Number(apobj[i].Radius) * 1.609344) {\n          //see if geocoded point is within bw of antenna\n          var ang1 = Number(apobj[i].Azimuth) - Number(apobj[i].Beamwidth) / 2;\n          var ang2 = Number(apobj[i].Azimuth) + Number(apobj[i].Beamwidth) / 2; //var heading = google.maps.geometry.spherical.computeHeading(apobj[i].coords,latlng);\n\n          var heading = distvinc.initialBearing;\n\n          if (apobj[i].Beamwidth == 360) {\n            incov = true;\n          } else {\n            incov = this.angleBetween(heading, ang1, ang2);\n          }\n\n          if (incov) {\n            apobj[i].bearing = heading;\n            aps.push(apobj[i]);\n          }\n        }\n      }\n\n      return aps;\n    } //find towers within a given radius of a customer point\n\n\n    findTowers(lat, lng, towers, radius) {\n      var twrdistance = new Array();\n      var incov = false;\n      var insectcnt = 0;\n      var twrs = new Array();\n      var sc = 0; //var radius = 7;\n\n      for (var i in towers) {\n        //alert(apobj[i].coords);\n        var sectcolor = \"#00FF00\";\n        incov = false;\n        var twrlat = parseFloat(towers[i].latitude);\n        var twrlon = parseFloat(towers[i].longitude); //var ept = new OpenLayers.Geometry.Point(latlng.lon, latlng.lat).transform(proj_2, proj_1);\n\n        var distvinc = Vincenty.distVincenty(twrlat, twrlon, parseFloat(lat), parseFloat(lng));\n        twrdistance[i] = distvinc.distance / 1000; //console.log(apobj[i].name + \", \" + Number(apobj[i].radius)* 1.609344 + \", \" + apdistance[i]);\n\n        if (twrdistance[i] <= Number(radius) * 1.609344) {\n          var heading = distvinc.initialBearing;\n          incov = true;\n\n          if (incov) {\n            twrs.push(towers[i]);\n          }\n        }\n      }\n\n      return twrs;\n    }\n\n    sectorShapes(ap, mode, contact) {\n      var radius; //if (mode == 0){\n\n      radius = ap.coverage_radius_mi; //}else{\n      //radius = 0.75;\n      //}\n\n      var clat;\n      var clon;\n\n      if (contact) {\n        clat = contact.lat;\n        clon = contact.lon;\n      }\n\n      var aplat = Number(ap.lat);\n      var aplon = Number(ap.lon);\n      var startprof = [aplat, aplon];\n      var endprof = [Number(clat), Number(clon)];\n      var erdist = radius * 1.609344 * 1000;\n      var ang1 = ap.azimuth - ap.beamwidth / 2;\n      var ang2 = ap.azimuth + ap.beamwidth / 2;\n      var vinc = Vincenty.destVincenty(aplat, aplon, ang1, erdist);\n      var endrad1 = [vinc.lat, vinc.lon];\n      var vinc2 = Vincenty.destVincenty(aplat, aplon, Number(ang2), erdist);\n      var endrad2 = [vinc2.lat, vinc2.lon];\n      var llarr = new Array(); //llarr[0] = apobj[i].coords;\n\n      if (ap.bw == 360) {\n        llarr[0] = endrad1;\n        llarr[1] = endrad1;\n      } else {\n        llarr[0] = [Number(ap.lat), Number(ap.lon)];\n        llarr[1] = endrad1;\n      }\n\n      var npts = 101;\n\n      for (var j = 2; j < npts; j++) {\n        var newang = ang1 + j * (ap.beamwidth / (npts - 1));\n        var vinc = Vincenty.destVincenty(aplat, aplon, newang, erdist);\n        llarr[j] = [vinc.lat, vinc.lon];\n      }\n\n      return llarr;\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}