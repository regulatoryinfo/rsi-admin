{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { GlobalVars } from '../common/globals';\nlet StatusComponent = class StatusComponent {\n  constructor(apiService, service, router) {\n    this.apiService = apiService;\n    this.service = service;\n    this.router = router;\n    this.displayedColumns = ['id', 'company', 'email', 'info', 'subscription', 'sites', 'aps', 'wired', 'settings', 'fabric', 'cnheat', 'state', 'bdc', 'pe', 'dups', 'prep', 'cust']; //exampleDatabase: ExampleHttpDatabase | null;\n    //data: GithubIssue[] = [];\n\n    this.companyData = new MatTableDataSource([]);\n    this.period_end = 'Dec 31, 2024';\n    this.resultsLength = 0;\n    this.isLoadingResults = true;\n    this.isRateLimitReached = false;\n    this.statSort = new MatSort();\n    this.service.setValue(this.period_end);\n  }\n\n  ngOnInit() {\n    GlobalVars.period_end = this.period_end;\n    this.companyData.sort = this.statSort;\n    this.service.setValue(this.period_end);\n    this.perEnd.nativeElement.value = this.period_end;\n    this.service.getValue().subscribe(value => {\n      this.period_end = value;\n      console.log(this.period_end);\n      this.getAdmindata();\n    });\n    this.getAdmindata(); // If the user changes the sort order, reset back to the first page.\n    //this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n\n    /*  merge(this.sort.sortChange, this.paginator.page)\r\n       .pipe(\r\n         startWith({}),\r\n         switchMap(() => {\r\n           this.isLoadingResults = true;\r\n           return this.exampleDatabase!.getRepoIssues(\r\n             this.sort.active,\r\n             this.sort.direction,\r\n             this.paginator.pageIndex,\r\n           ).pipe(catchError(() => observableOf(null)));\r\n         }),\r\n         map(data => {\r\n           // Flip flag to show that loading has finished.\r\n           this.isLoadingResults = false;\r\n           this.isRateLimitReached = data === null;\r\n                  if (data === null) {\r\n             return [];\r\n           }\r\n                  // Only refresh the result length if there is new data. In case of rate\r\n           // limit errors, we do not want to reset the paginator to zero, as that\r\n           // would prevent users from re-triggering requests.\r\n           this.resultsLength = data.total_count;\r\n           return data.items;\r\n         }),\r\n       )\r\n       .subscribe(data => (this.data = data)); */\n  }\n\n  getAdmindata() {\n    this.apiService.getAdminreport(this.period_end).subscribe(response => {\n      if (response.result == 'success') {\n        console.log('got status');\n        this.companyData = new MatTableDataSource(response.orgs);\n        this.companyData.sort = this.statSort;\n        console.log(JSON.stringify(response.orgs));\n      } else {\n        console.log(JSON.stringify(response.error));\n      }\n    });\n  }\n\n  changePeriod(e) {\n    //console.log(JSON.stringify(e));\n    //GlobalVars.period_end = e;\n    this.period_end = e;\n    this.service.setValue(e);\n    GlobalVars.period_end = this.period_end;\n    this.getAdmindata();\n  }\n\n  getMap(row) {\n    const org_id = row.id;\n    GlobalVars.org_id = row.id;\n    GlobalVars.company = row.company;\n\n    if (row.pe_approved == true) {\n      GlobalVars.pe_approved = true;\n    } else {\n      GlobalVars.pe_approved = false;\n    }\n\n    const url = 'map';\n    console.log(\"routing to \" + url);\n    this.router.navigate([url]).then(e => {\n      if (e) {\n        console.log(\"nav success\");\n      } else {\n        console.log(\"nav fail\");\n      }\n    });\n  }\n\n  showCustomer(row) {\n    const org_id = row.id;\n    GlobalVars.org_id = row.id;\n    GlobalVars.company = row.company;\n\n    if (row.pe_approved == true) {\n      GlobalVars.pe_approved = true;\n    } else {\n      GlobalVars.pe_approved = false;\n    }\n\n    const url = 'customer';\n    console.log(\"routing to customers \");\n    this.router.navigate([url]).then(e => {\n      if (e) {\n        console.log(\"nav success\");\n      } else {\n        console.log(\"nav fail\");\n      }\n    });\n  }\n\n  prepareFiling(row) {\n    const org_id = row.id;\n    const periodformatted = this.formatDate(this.period_end);\n    console.log(periodformatted);\n    this.apiService.prepareBdcfiling(org_id, periodformatted).subscribe(response => {\n      if (response.result == 'success') {\n        alert('Success. Files are in the directory');\n      } else {\n        console.log(JSON.stringify(response.error));\n      }\n    });\n  }\n\n  checkDuplicates(row) {\n    const org_id = row.id;\n    const periodformatted = this.formatDate(this.period_end);\n    console.log(periodformatted);\n    this.apiService.checkDuplicates(org_id, periodformatted).subscribe(response => {\n      if (response.result == 'success') {\n        console.log(response.output);\n\n        if (response.output != '') {\n          alert('tracts were checked but there were errors ' + response.output);\n        }\n      } else {\n        console.log(JSON.stringify(response.error));\n      }\n    });\n  }\n\n  formatDate(date) {\n    let d = new Date(date);\n    let month = (d.getMonth() + 1).toString();\n    let day = d.getDate().toString();\n    let year = d.getFullYear();\n\n    if (month.length < 2) {\n      month = '0' + month;\n    }\n\n    if (day.length < 2) {\n      day = '0' + day;\n    }\n\n    return [year, month, day].join('-');\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator)], StatusComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatSort)], StatusComponent.prototype, \"sort\", void 0);\n\n__decorate([ViewChild('statSort')], StatusComponent.prototype, \"statSort\", void 0);\n\n__decorate([ViewChild('periodEnd', {\n  static: true\n})], StatusComponent.prototype, \"perEnd\", void 0);\n\nStatusComponent = __decorate([Component({\n  selector: 'app-status',\n  templateUrl: './status.component.html',\n  styleUrls: ['./status.component.scss']\n})], StatusComponent);\nexport { StatusComponent };","map":null,"metadata":{},"sourceType":"module"}